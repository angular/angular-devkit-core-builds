"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Messages that can be sent TO a job. The job needs to listen to those.
 */
var JobInboundMessageKind;
(function (JobInboundMessageKind) {
    JobInboundMessageKind["Ping"] = "ip";
    JobInboundMessageKind["Stop"] = "is";
    // Channel specific messages.
    JobInboundMessageKind["Input"] = "in";
    // Input channel does not allow completion / error. Erroring this will just close the Subject
    // but not notify the job.
})(JobInboundMessageKind = exports.JobInboundMessageKind || (exports.JobInboundMessageKind = {}));
/**
 * Kind of messages that can be outputted from a job.
 */
var JobOutboundMessageKind;
(function (JobOutboundMessageKind) {
    // Lifecycle specific messages.
    JobOutboundMessageKind["OnReady"] = "c";
    JobOutboundMessageKind["Start"] = "s";
    JobOutboundMessageKind["End"] = "e";
    JobOutboundMessageKind["Pong"] = "p";
    // Feedback messages.
    JobOutboundMessageKind["Log"] = "l";
    JobOutboundMessageKind["Output"] = "o";
    // Channel specific messages.
    JobOutboundMessageKind["ChannelCreate"] = "cn";
    JobOutboundMessageKind["ChannelMessage"] = "cm";
    JobOutboundMessageKind["ChannelError"] = "ce";
    JobOutboundMessageKind["ChannelComplete"] = "cc";
})(JobOutboundMessageKind = exports.JobOutboundMessageKind || (exports.JobOutboundMessageKind = {}));
/**
 * The state of a job. These are changed as the job reports a new state through its messages.
 */
var JobState;
(function (JobState) {
    /**
     * The job was queued and is waiting to start.
     */
    JobState["Queued"] = "queued";
    /**
     * The job description was found, its dependencies (see "Synchronizing and Dependencies")
     * are done running, and the job's argument is validated and the job's code will be executed.
     */
    JobState["Ready"] = "ready";
    /**
     * The job has been started. The job implementation is expected to send this as soon as its
     * work is starting.
     */
    JobState["Started"] = "started";
    /**
     * The job has ended and is done running.
     */
    JobState["Ended"] = "ended";
    /**
     * An error occured and the job stopped because of internal state.
     */
    JobState["Errored"] = "errored";
})(JobState = exports.JobState || (exports.JobState = {}));
function isJobHandler(value) {
    return typeof value == 'function'
        && typeof value.jobDescription == 'object'
        && value.jobDescription !== null;
}
exports.isJobHandler = isJobHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9jb3JlL3NyYy9leHBlcmltZW50YWwvam9icy9hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFnRUE7O0dBRUc7QUFDSCxJQUFZLHFCQVFYO0FBUkQsV0FBWSxxQkFBcUI7SUFDL0Isb0NBQVcsQ0FBQTtJQUNYLG9DQUFXLENBQUE7SUFFWCw2QkFBNkI7SUFDN0IscUNBQVksQ0FBQTtJQUNaLDZGQUE2RjtJQUM3RiwwQkFBMEI7QUFDNUIsQ0FBQyxFQVJXLHFCQUFxQixHQUFyQiw2QkFBcUIsS0FBckIsNkJBQXFCLFFBUWhDO0FBbUREOztHQUVHO0FBQ0gsSUFBWSxzQkFnQlg7QUFoQkQsV0FBWSxzQkFBc0I7SUFDaEMsK0JBQStCO0lBQy9CLHVDQUFhLENBQUE7SUFDYixxQ0FBVyxDQUFBO0lBQ1gsbUNBQVMsQ0FBQTtJQUNULG9DQUFVLENBQUE7SUFFVixxQkFBcUI7SUFDckIsbUNBQVMsQ0FBQTtJQUNULHNDQUFZLENBQUE7SUFFWiw2QkFBNkI7SUFDN0IsOENBQW9CLENBQUE7SUFDcEIsK0NBQXFCLENBQUE7SUFDckIsNkNBQW1CLENBQUE7SUFDbkIsZ0RBQXNCLENBQUE7QUFDeEIsQ0FBQyxFQWhCVyxzQkFBc0IsR0FBdEIsOEJBQXNCLEtBQXRCLDhCQUFzQixRQWdCakM7QUE4SUQ7O0dBRUc7QUFDSCxJQUFZLFFBdUJYO0FBdkJELFdBQVksUUFBUTtJQUNsQjs7T0FFRztJQUNILDZCQUFpQixDQUFBO0lBQ2pCOzs7T0FHRztJQUNILDJCQUFlLENBQUE7SUFDZjs7O09BR0c7SUFDSCwrQkFBbUIsQ0FBQTtJQUNuQjs7T0FFRztJQUNILDJCQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILCtCQUFtQixDQUFBO0FBQ3JCLENBQUMsRUF2QlcsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUF1Qm5CO0FBMEpELFNBQWdCLFlBQVksQ0FNMUIsS0FBVTtJQUNWLE9BQU8sT0FBTyxLQUFLLElBQUksVUFBVTtXQUMxQixPQUFPLEtBQUssQ0FBQyxjQUFjLElBQUksUUFBUTtXQUN2QyxLQUFLLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQztBQUN2QyxDQUFDO0FBVkQsb0NBVUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSnNvbk9iamVjdCwgSnNvblZhbHVlLCBzY2hlbWEgfSBmcm9tICcuLi8uLi9qc29uL2luZGV4JztcbmltcG9ydCB7IExvZ0VudHJ5LCBMb2dnZXJBcGkgfSBmcm9tICcuLi8uLi9sb2dnZXIvaW5kZXgnO1xuaW1wb3J0IHsgRGVlcFJlYWRvbmx5IH0gZnJvbSAnLi4vLi4vdXRpbHMvaW5kZXgnO1xuXG4vKipcbiAqIEEgam9iIG5hbWUgaXMganVzdCBhIHN0cmluZyAobmVlZHMgdG8gYmUgc2VyaWFsaXphYmxlKS5cbiAqL1xuZXhwb3J0IHR5cGUgSm9iTmFtZSA9IHN0cmluZztcblxuXG4vKipcbiAqIFRoZSBqb2IgaGFuZGxlciBmdW5jdGlvbiwgd2hpY2ggaXMgYSBtZXRob2QgdGhhdCdzIGV4ZWN1dGVkIGZvciB0aGUgam9iLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEpvYkhhbmRsZXI8XG4gIEFyZ1QgZXh0ZW5kcyBKc29uVmFsdWUsXG4gIElucHV0VCBleHRlbmRzIEpzb25WYWx1ZSxcbiAgT3V0cHV0VCBleHRlbmRzIEpzb25WYWx1ZSxcbj4ge1xuICAoXG4gICAgYXJndW1lbnQ6IEFyZ1QsXG4gICAgY29udGV4dDogSm9iSGFuZGxlckNvbnRleHQ8QXJnVCwgSW5wdXRULCBPdXRwdXRUPixcbiAgKTogT2JzZXJ2YWJsZTxKb2JPdXRib3VuZE1lc3NhZ2U8T3V0cHV0VD4+O1xuXG4gIGpvYkRlc2NyaXB0aW9uOiBQYXJ0aWFsPEpvYkRlc2NyaXB0aW9uPjtcbn1cblxuXG4vKipcbiAqIFRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBqb2IgaXMgcnVuLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEpvYkhhbmRsZXJDb250ZXh0PFxuICBNaW5pbXVtQXJndW1lbnRWYWx1ZVQgZXh0ZW5kcyBKc29uVmFsdWUgPSBKc29uVmFsdWUsXG4gIE1pbmltdW1JbnB1dFZhbHVlVCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbiAgTWluaW11bU91dHB1dFZhbHVlVCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbj4ge1xuICByZWFkb25seSBkZXNjcmlwdGlvbjogSm9iRGVzY3JpcHRpb247XG4gIHJlYWRvbmx5IHNjaGVkdWxlcjogU2NoZWR1bGVyPEpzb25WYWx1ZSwgSnNvblZhbHVlLCBKc29uVmFsdWU+O1xuXG4gIC8vIEluIHRoaXMgY29udGV4dCwgSnNvblZhbHVlIGlzIGNvbXBhcmFibGUgdG8gYGFueWAuXG4gIHJlYWRvbmx5IGRlcGVuZGVuY2llczogSm9iPEpzb25WYWx1ZSwgSnNvblZhbHVlLCBKc29uVmFsdWU+W107XG5cbiAgcmVhZG9ubHkgaW5ib3VuZEJ1czogT2JzZXJ2YWJsZTxKb2JJbmJvdW5kTWVzc2FnZTxNaW5pbXVtSW5wdXRWYWx1ZVQ+Pjtcbn1cblxuXG4vKipcbiAqIE1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCBhIGpvYi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKb2JEZXNjcmlwdGlvbiBleHRlbmRzIEpzb25PYmplY3Qge1xuICByZWFkb25seSBuYW1lOiBKb2JOYW1lO1xuXG4gIHJlYWRvbmx5IGFyZ3VtZW50OiBEZWVwUmVhZG9ubHk8c2NoZW1hLkpzb25TY2hlbWE+O1xuICByZWFkb25seSBpbnB1dDogRGVlcFJlYWRvbmx5PHNjaGVtYS5Kc29uU2NoZW1hPjtcbiAgcmVhZG9ubHkgb3V0cHV0OiBEZWVwUmVhZG9ubHk8c2NoZW1hLkpzb25TY2hlbWE+O1xufVxuXG4vKipcbiAqIE1lc3NhZ2VzIHRoYXQgY2FuIGJlIHNlbnQgVE8gYSBqb2IuIFRoZSBqb2IgbmVlZHMgdG8gbGlzdGVuIHRvIHRob3NlLlxuICovXG5leHBvcnQgZW51bSBKb2JJbmJvdW5kTWVzc2FnZUtpbmQge1xuICBQaW5nID0gJ2lwJyxcbiAgU3RvcCA9ICdpcycsXG5cbiAgLy8gQ2hhbm5lbCBzcGVjaWZpYyBtZXNzYWdlcy5cbiAgSW5wdXQgPSAnaW4nLFxuICAvLyBJbnB1dCBjaGFubmVsIGRvZXMgbm90IGFsbG93IGNvbXBsZXRpb24gLyBlcnJvci4gRXJyb3JpbmcgdGhpcyB3aWxsIGp1c3QgY2xvc2UgdGhlIFN1YmplY3RcbiAgLy8gYnV0IG5vdCBub3RpZnkgdGhlIGpvYi5cbn1cblxuLyoqIEJhc2UgaW50ZXJmYWNlIGZvciB0aGUgYWxsIGpvYiBpbmJvdW5kIG1lc3NhZ2VzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBKb2JJbmJvdW5kTWVzc2FnZUJhc2UgZXh0ZW5kcyBKc29uT2JqZWN0IHtcbiAgLyoqXG4gICAqIFRoZSBraW5kIG9mIG1lc3NhZ2UgdGhpcyBpcy5cbiAgICovXG4gIHJlYWRvbmx5IGtpbmQ6IEpvYkluYm91bmRNZXNzYWdlS2luZDtcbn1cblxuLyoqXG4gKiBBIHBpbmcgdG8gdGhlIGpvYi4gVGhlIGpvYiBzaG91bGQgcmVwbHkgd2l0aCBhIHBvbmcgYXMgc29vbiBhcyBwb3NzaWJsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKb2JJbmJvdW5kTWVzc2FnZVBpbmcgZXh0ZW5kcyBKb2JJbmJvdW5kTWVzc2FnZUJhc2Uge1xuICByZWFkb25seSBraW5kOiBKb2JJbmJvdW5kTWVzc2FnZUtpbmQuUGluZztcblxuICAvKipcbiAgICogQW4gSUQgdGhhdCBzaG91bGQgYmUgcmV0dXJuZWQgaW4gdGhlIGNvcnJlc3BvbmRpbmcgUG9uZy5cbiAgICovXG4gIHJlYWRvbmx5IGlkOiBudW1iZXI7XG59XG5cbi8qKlxuICogU3RvcCB0aGUgam9iLiBUaGlzIGlzIGhhbmRsZWQgYnkgdGhlIGpvYiBpdHNlbGYgYW5kIGpvYnMgbWlnaHQgbm90IGhhbmRsZSBpdC4gSXQgd2lsbCBhbHNvXG4gKiB1bnN1YnNjcmliZSBmcm9tIHRoZSBPYnNlcnZhYmxlPD4uXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gU0lHVEVSTS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKb2JJbmJvdW5kTWVzc2FnZVN0b3AgZXh0ZW5kcyBKb2JJbmJvdW5kTWVzc2FnZUJhc2Uge1xuICByZWFkb25seSBraW5kOiBKb2JJbmJvdW5kTWVzc2FnZUtpbmQuU3RvcDtcbn1cblxuLyoqXG4gKiBBIEpvYiB3YW50cyB0byBzZW5kIGEgbWVzc2FnZSB0byBhIGNoYW5uZWwuIFRoaXMgY2FuIGJlIG1hcnNoYWxlZCwgYW5kIHRoZSBKb2Igb2JqZWN0XG4gKiBoYXMgaGVscGVycyB0byB0cmFuc2Zvcm0gdGhpcyBpbnRvIGFuIG9ic2VydmFibGUuIFRoZSBjb250ZXh0IGFsc28gY2FuIGNyZWF0ZSBSeEpTIHN1YmplY3RzIHRoYXRcbiAqIG1hcnNoYWxsIG1lc3NhZ2VzIHRocm91Z2ggYSBjaGFubmVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEpvYkluYm91bmRNZXNzYWdlSW5wdXQ8SW5wdXRUIGV4dGVuZHMgSnNvblZhbHVlPiBleHRlbmRzIEpvYkluYm91bmRNZXNzYWdlQmFzZSB7XG4gIHJlYWRvbmx5IGtpbmQ6IEpvYkluYm91bmRNZXNzYWdlS2luZC5JbnB1dDtcblxuICAvKipcbiAgICogVGhlIGlucHV0IGJlaW5nIHNlbnQgdG8gdGhlIGpvYi5cbiAgICovXG4gIHJlYWRvbmx5IHZhbHVlOiBJbnB1dFQ7XG59XG5cbmV4cG9ydCB0eXBlIEpvYkluYm91bmRNZXNzYWdlPElucHV0VCBleHRlbmRzIEpzb25WYWx1ZT4gPVxuICBKb2JJbmJvdW5kTWVzc2FnZVBpbmdcbiAgfCBKb2JJbmJvdW5kTWVzc2FnZVN0b3BcbiAgfCBKb2JJbmJvdW5kTWVzc2FnZUlucHV0PElucHV0VD5cbiAgO1xuXG4vKipcbiAqIEtpbmQgb2YgbWVzc2FnZXMgdGhhdCBjYW4gYmUgb3V0cHV0dGVkIGZyb20gYSBqb2IuXG4gKi9cbmV4cG9ydCBlbnVtIEpvYk91dGJvdW5kTWVzc2FnZUtpbmQge1xuICAvLyBMaWZlY3ljbGUgc3BlY2lmaWMgbWVzc2FnZXMuXG4gIE9uUmVhZHkgPSAnYycsXG4gIFN0YXJ0ID0gJ3MnLFxuICBFbmQgPSAnZScsXG4gIFBvbmcgPSAncCcsXG5cbiAgLy8gRmVlZGJhY2sgbWVzc2FnZXMuXG4gIExvZyA9ICdsJyxcbiAgT3V0cHV0ID0gJ28nLFxuXG4gIC8vIENoYW5uZWwgc3BlY2lmaWMgbWVzc2FnZXMuXG4gIENoYW5uZWxDcmVhdGUgPSAnY24nLFxuICBDaGFubmVsTWVzc2FnZSA9ICdjbScsXG4gIENoYW5uZWxFcnJvciA9ICdjZScsXG4gIENoYW5uZWxDb21wbGV0ZSA9ICdjYycsXG59XG5cbi8qKiBCYXNlIGludGVyZmFjZSBmb3IgdGhlIGFsbCBqb2IgbWVzc2FnZXMuICovXG5leHBvcnQgaW50ZXJmYWNlIEpvYk91dGJvdW5kTWVzc2FnZUJhc2Uge1xuICAvKipcbiAgICogVGhlIGpvYiBkZXNjcmlwdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBKb2JEZXNjcmlwdGlvbjtcblxuICAvKipcbiAgICogVGhlIGtpbmQgb2YgbWVzc2FnZSB0aGlzIGlzLlxuICAgKi9cbiAgcmVhZG9ubHkga2luZDogSm9iT3V0Ym91bmRNZXNzYWdlS2luZDtcbn1cblxuLyoqXG4gKiBUaGUgam9iIGhhcyBiZWVuIGNyZWF0ZWQgYW5kIHdpbGwgdmFsaWRhdGUgaXRzIGlucHV0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEpvYk91dGJvdW5kTWVzc2FnZU9uUmVhZHkgZXh0ZW5kcyBKb2JPdXRib3VuZE1lc3NhZ2VCYXNlIHtcbiAgcmVhZG9ubHkga2luZDogSm9iT3V0Ym91bmRNZXNzYWdlS2luZC5PblJlYWR5O1xufVxuXG4vKipcbiAqIFRoZSBqb2Igc3RhcnRlZC4gVGhpcyBpcyBkb25lIGJ5IHRoZSBqb2IgaXRzZWxmLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEpvYk91dGJvdW5kTWVzc2FnZVN0YXJ0IGV4dGVuZHMgSm9iT3V0Ym91bmRNZXNzYWdlQmFzZSB7XG4gIHJlYWRvbmx5IGtpbmQ6IEpvYk91dGJvdW5kTWVzc2FnZUtpbmQuU3RhcnQ7XG59XG5cbi8qKlxuICogQSBsb2dnaW5nIG1lc3NhZ2UsIHN1cHBvcnRpbmcgdGhlIGxvZ2dpbmcuTG9nRW50cnkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iT3V0Ym91bmRNZXNzYWdlTG9nIGV4dGVuZHMgSm9iT3V0Ym91bmRNZXNzYWdlQmFzZSB7XG4gIHJlYWRvbmx5IGtpbmQ6IEpvYk91dGJvdW5kTWVzc2FnZUtpbmQuTG9nO1xuICByZWFkb25seSBlbnRyeTogTG9nRW50cnk7XG59XG5cbi8qKlxuICogQW4gb3V0cHV0IHZhbHVlIGlzIGF2YWlsYWJsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKb2JPdXRib3VuZE1lc3NhZ2VPdXRwdXQ8XG4gIE91dHB1dFQgZXh0ZW5kcyBKc29uVmFsdWUsXG4+IGV4dGVuZHMgSm9iT3V0Ym91bmRNZXNzYWdlQmFzZSB7XG4gIHJlYWRvbmx5IGtpbmQ6IEpvYk91dGJvdW5kTWVzc2FnZUtpbmQuT3V0cHV0O1xuXG4gIC8qKlxuICAgKiBUaGUgbWVzc2FnZSBiZWluZyBvdXRwdXR0ZWQgZnJvbSB0aGUgam9iLlxuICAgKi9cbiAgcmVhZG9ubHkgdmFsdWU6IE91dHB1dFQ7XG59XG5cblxuLyoqXG4gKiBCYXNlIGludGVyZmFjZSBmb3IgYWxsIGpvYiBtZXNzYWdlIHJlbGF0ZWQgdG8gY2hhbm5lbHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbEJhc2UgZXh0ZW5kcyBKb2JPdXRib3VuZE1lc3NhZ2VCYXNlIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBjaGFubmVsLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgam9iIHdhbnRzIHRvIHNlbmQgYSBtZXNzYWdlIHRvIGEgY2hhbm5lbC4gVGhpcyBjYW4gYmUgbWFyc2hhbGVkLCBhbmQgdGhlIEpvYiBvYmplY3RcbiAqIGhhcyBoZWxwZXJzIHRvIHRyYW5zZm9ybSB0aGlzIGludG8gYW4gb2JzZXJ2YWJsZS4gVGhlIGNvbnRleHQgYWxzbyBjYW4gY3JlYXRlIFJ4SlMgc3ViamVjdHMgdGhhdFxuICogbWFyc2hhbGwgbWVzc2FnZXMgdGhyb3VnaCBhIGNoYW5uZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbE1lc3NhZ2UgZXh0ZW5kcyBKb2JPdXRib3VuZE1lc3NhZ2VDaGFubmVsQmFzZSB7XG4gIHJlYWRvbmx5IGtpbmQ6IEpvYk91dGJvdW5kTWVzc2FnZUtpbmQuQ2hhbm5lbE1lc3NhZ2U7XG5cbiAgLyoqXG4gICAqIFRoZSBtZXNzYWdlIGJlaW5nIHNlbnQgdG8gdGhlIGNoYW5uZWwuXG4gICAqL1xuICByZWFkb25seSBtZXNzYWdlOiBKc29uVmFsdWU7XG59XG5cbi8qKlxuICogQSBqb2Igd2FudHMgdG8gc2VuZCBhbiBlcnJvciB0byBvbmUgb2YgaXRzIGNoYW5uZWwuIFRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgb2YgdGhyb3dpbmcgdGhyb3VnaFxuICogYW4gT2JzZXJ2YWJsZS4gVGhlIHNpZGUgY2hhbm5lbCB3aWxsIG5vdCByZWNlaXZlIGFueSBtb3JlIG1lc3NhZ2VzIGFmdGVyIHRoaXMsIGFuZCB3aWxsIG5vdFxuICogY29tcGxldGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbEVycm9yIGV4dGVuZHMgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbEJhc2Uge1xuICByZWFkb25seSBraW5kOiBKb2JPdXRib3VuZE1lc3NhZ2VLaW5kLkNoYW5uZWxFcnJvcjtcblxuICAvKipcbiAgICogVGhlIGVycm9yIG1lc3NhZ2UgYmVpbmcgc2VudCB0byB0aGUgY2hhbm5lbC5cbiAgICovXG4gIHJlYWRvbmx5IGVycm9yOiBKc29uVmFsdWU7XG59XG5cbi8qKlxuICogQSBqb2Igd2FudHMgdG8gY3JlYXRlIGEgbmV3IGNoYW5uZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbENyZWF0ZSBleHRlbmRzIEpvYk91dGJvdW5kTWVzc2FnZUNoYW5uZWxCYXNlIHtcbiAgcmVhZG9ubHkga2luZDogSm9iT3V0Ym91bmRNZXNzYWdlS2luZC5DaGFubmVsQ3JlYXRlO1xufVxuXG4vKipcbiAqIEEgam9iIHdhbnRzIHRvIGNsb3NlIHRoZSBjaGFubmVsLCBhcyBjb21wbGV0ZWQuIFRoaXMgaXMgZG9uZSBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIGpvYiBlbmRzLFxuICogb3IgY2FuIGJlIGRvbmUgZnJvbSB0aGUgam9iIHRvIGNsb3NlIGl0LiBBIGNsb3NlZCBjaGFubmVsIG1pZ2h0IGJlIHJlb3BlbmVkLCBidXQgdGhlIHVzZXJcbiAqIG5lZWQgdG8gcmVjYWxsIGdldENoYW5uZWwoKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKb2JPdXRib3VuZE1lc3NhZ2VDaGFubmVsQ29tcGxldGUgZXh0ZW5kcyBKb2JPdXRib3VuZE1lc3NhZ2VDaGFubmVsQmFzZSB7XG4gIHJlYWRvbmx5IGtpbmQ6IEpvYk91dGJvdW5kTWVzc2FnZUtpbmQuQ2hhbm5lbENvbXBsZXRlO1xufVxuXG4vKipcbiAqIE9uRW5kIG9mIHRoZSBqb2IgcnVuLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEpvYk91dGJvdW5kTWVzc2FnZUVuZCBleHRlbmRzIEpvYk91dGJvdW5kTWVzc2FnZUJhc2Uge1xuICByZWFkb25seSBraW5kOiBKb2JPdXRib3VuZE1lc3NhZ2VLaW5kLkVuZDtcbn1cblxuLyoqXG4gKiBBIHBvbmcgcmVzcG9uc2UgZnJvbSBhIHBpbmcgaW5wdXQuIFRoZSBpZCBpcyB0aGUgc2FtZSBhcyB0aGUgb25lIHBhc3NlZCBpbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBKb2JPdXRib3VuZE1lc3NhZ2VQb25nIGV4dGVuZHMgSm9iT3V0Ym91bmRNZXNzYWdlQmFzZSB7XG4gIHJlYWRvbmx5IGtpbmQ6IEpvYk91dGJvdW5kTWVzc2FnZUtpbmQuUG9uZztcblxuICAvKipcbiAgICogVGhlIElEIHRoYXQgd2FzIHBhc3NlZCBpbiB0aGUgYFBpbmdgIG1lc3NhZ2VzLlxuICAgKi9cbiAgcmVhZG9ubHkgaWQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBHZW5lcmljIG1lc3NhZ2UgdHlwZS5cbiAqL1xuZXhwb3J0IHR5cGUgSm9iT3V0Ym91bmRNZXNzYWdlPE91dHB1dFQgZXh0ZW5kcyBKc29uVmFsdWU+ID1cbiAgSm9iT3V0Ym91bmRNZXNzYWdlT25SZWFkeVxuICB8IEpvYk91dGJvdW5kTWVzc2FnZVN0YXJ0XG4gIHwgSm9iT3V0Ym91bmRNZXNzYWdlTG9nXG4gIHwgSm9iT3V0Ym91bmRNZXNzYWdlT3V0cHV0PE91dHB1dFQ+XG4gIHwgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbENyZWF0ZVxuICB8IEpvYk91dGJvdW5kTWVzc2FnZUNoYW5uZWxNZXNzYWdlXG4gIHwgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbEVycm9yXG4gIHwgSm9iT3V0Ym91bmRNZXNzYWdlQ2hhbm5lbENvbXBsZXRlXG4gIHwgSm9iT3V0Ym91bmRNZXNzYWdlRW5kXG4gIHwgSm9iT3V0Ym91bmRNZXNzYWdlUG9uZ1xuICA7XG5cblxuLyoqXG4gKiBUaGUgc3RhdGUgb2YgYSBqb2IuIFRoZXNlIGFyZSBjaGFuZ2VkIGFzIHRoZSBqb2IgcmVwb3J0cyBhIG5ldyBzdGF0ZSB0aHJvdWdoIGl0cyBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGVudW0gSm9iU3RhdGUge1xuICAvKipcbiAgICogVGhlIGpvYiB3YXMgcXVldWVkIGFuZCBpcyB3YWl0aW5nIHRvIHN0YXJ0LlxuICAgKi9cbiAgUXVldWVkID0gJ3F1ZXVlZCcsXG4gIC8qKlxuICAgKiBUaGUgam9iIGRlc2NyaXB0aW9uIHdhcyBmb3VuZCwgaXRzIGRlcGVuZGVuY2llcyAoc2VlIFwiU3luY2hyb25pemluZyBhbmQgRGVwZW5kZW5jaWVzXCIpXG4gICAqIGFyZSBkb25lIHJ1bm5pbmcsIGFuZCB0aGUgam9iJ3MgYXJndW1lbnQgaXMgdmFsaWRhdGVkIGFuZCB0aGUgam9iJ3MgY29kZSB3aWxsIGJlIGV4ZWN1dGVkLlxuICAgKi9cbiAgUmVhZHkgPSAncmVhZHknLFxuICAvKipcbiAgICogVGhlIGpvYiBoYXMgYmVlbiBzdGFydGVkLiBUaGUgam9iIGltcGxlbWVudGF0aW9uIGlzIGV4cGVjdGVkIHRvIHNlbmQgdGhpcyBhcyBzb29uIGFzIGl0c1xuICAgKiB3b3JrIGlzIHN0YXJ0aW5nLlxuICAgKi9cbiAgU3RhcnRlZCA9ICdzdGFydGVkJyxcbiAgLyoqXG4gICAqIFRoZSBqb2IgaGFzIGVuZGVkIGFuZCBpcyBkb25lIHJ1bm5pbmcuXG4gICAqL1xuICBFbmRlZCA9ICdlbmRlZCcsXG4gIC8qKlxuICAgKiBBbiBlcnJvciBvY2N1cmVkIGFuZCB0aGUgam9iIHN0b3BwZWQgYmVjYXVzZSBvZiBpbnRlcm5hbCBzdGF0ZS5cbiAgICovXG4gIEVycm9yZWQgPSAnZXJyb3JlZCcsXG59XG5cblxuLyoqXG4gKiBBIEpvYiBpbnN0YW5jZSwgcmV0dXJuZWQgZnJvbSBzY2hlZHVsaW5nIGEgam9iLiBBIEpvYiBpbnN0YW5jZSBpcyBfbm90XyBzZXJpYWxpemFibGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iPFxuICBBcmd1bWVudFQgZXh0ZW5kcyBKc29uVmFsdWUgPSBKc29uVmFsdWUsXG4gIElucHV0VCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbiAgT3V0cHV0VCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbj4ge1xuICAvKipcbiAgICogRGVzY3JpcHRpb24gb2YgdGhlIGpvYi4gUmVzb2x2aW5nIHRoZSBqb2IncyBkZXNjcmlwdGlvbiBjYW4gYmUgZG9uZSBhc3luY2hyb25vdXNseSwgc28gdGhpc1xuICAgKiBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgd2lsbCByZXNvbHZlIHdoZW4gaXQncyByZWFkeS5cbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBPYnNlcnZhYmxlPEpvYkRlc2NyaXB0aW9uPjtcblxuICAvKipcbiAgICogQXJndW1lbnQgc2VudCB3aGVuIHNjaGVkdWxpbmcgdGhlIGpvYi4gVGhpcyBpcyBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50LlxuICAgKi9cbiAgcmVhZG9ubHkgYXJndW1lbnQ6IEFyZ3VtZW50VDtcblxuICAvKipcbiAgICogVGhlIGlucHV0IHRvIHRoZSBqb2IuIFRoaXMgZ29lcyB0aHJvdWdoIHRoZSBpbnB1dCBjaGFubmVsIGFzIG1lc3NhZ2VzLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5wdXQ6IE9ic2VydmVyPElucHV0VD47XG5cbiAgLyoqXG4gICAqIE91dHB1dHMgb2YgdGhpcyBqb2IuXG4gICAqL1xuICByZWFkb25seSBvdXRwdXQ6IE9ic2VydmFibGU8T3V0cHV0VD47XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBqb2IuXG4gICAqL1xuICByZWFkb25seSBzdGF0ZTogSm9iU3RhdGU7XG5cbiAgLyoqXG4gICAqIEdldCBhIGNoYW5uZWwgdGhhdCB2YWxpZGF0ZXMgYWdhaW5zdCB0aGUgc2NoZW1hLiBNZXNzYWdlcyB3aWxsIGJlIGZpbHRlcmVkIGJ5IHRoZSBzY2hlbWEuXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjaGFubmVsLlxuICAgKiBAcGFyYW0gc2NoZW1hIEEgc2NoZW1hIHRvIHVzZSB0byB2YWxpZGF0ZSBtZXNzYWdlcy5cbiAgICovXG4gIGdldENoYW5uZWw8VCBleHRlbmRzIEpzb25WYWx1ZT4obmFtZTogc3RyaW5nLCBzY2hlbWE/OiBzY2hlbWEuSnNvblNjaGVtYSk6IE9ic2VydmFibGU8VD47XG5cbiAgLyoqXG4gICAqIFBpbmdzIHRoZSBqb2IgYW5kIHdhaXQgZm9yIHRoZSByZXN1bHRpbmcgUG9uZyBiZWZvcmUgY29tcGxldGluZy5cbiAgICovXG4gIHBpbmcoKTogT2JzZXJ2YWJsZTxuZXZlcj47XG5cbiAgLyoqXG4gICAqIFN0b3BzIHRoZSBqb2IgZnJvbSBydW5uaW5nLiBUaGlzIGlzIGRpZmZlcmVudCB0aGFuIHVuc3Vic2NyaWJpbmcgZnJvbSB0aGUgb3V0cHV0IGFzIGluIGl0XG4gICAqIHNlbmRzIHRoZSBKb2JJbmJvdW5kTWVzc2FnZUtpbmQuU3RvcCByYXcgaW5wdXQgdG8gdGhlIGpvYi5cbiAgICovXG4gIHN0b3AoKTogdm9pZDtcblxuICAvKipcbiAgICogVGhlIEpvYkluYm91bmRNZXNzYWdlIG1lc3NhZ2VzIFRPIHRoZSBqb2IuXG4gICAqL1xuICByZWFkb25seSBpbmJvdW5kQnVzOiBPYnNlcnZlcjxKb2JJbmJvdW5kTWVzc2FnZTxJbnB1dFQ+PjtcblxuICAvKipcbiAgICogVGhlIEpvYk91dGJvdW5kTWVzc2FnZSBGUk9NIHRoZSBqb2IuXG4gICAqL1xuICByZWFkb25seSBvdXRib3VuZEJ1czogT2JzZXJ2YWJsZTxKb2JPdXRib3VuZE1lc3NhZ2U8T3V0cHV0VD4+O1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHNjaGVkdWxpbmcgam9icy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTY2hlZHVsZUpvYk9wdGlvbnMge1xuICAvKipcbiAgICogV2hlcmUgc2hvdWxkIGxvZ2dpbmcgYmUgcGFzc2VkIGluLiBCeSBkZWZhdWx0IGxvZ2dpbmcgd2lsbCBiZSBkcm9wcGVkLlxuICAgKi9cbiAgbG9nZ2VyPzogTG9nZ2VyQXBpO1xuXG4gIC8qKlxuICAgKiBKb2JzIHRoYXQgbmVlZCB0byBmaW5pc2ggYmVmb3JlIHNjaGVkdWxpbmcgdGhpcyBqb2IuIFRoZXNlIGRlcGVuZGVuY2llcyB3aWxsIGJlIHBhc3NlZFxuICAgKiB0byB0aGUgam9iIGl0c2VsZiBpbiBpdHMgY29udGV4dC5cbiAgICovXG4gIGRlcGVuZGVuY2llcz86IEpvYiB8IEpvYltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdHJ5PFxuICBNaW5pbXVtQXJndW1lbnRWYWx1ZVQgZXh0ZW5kcyBKc29uVmFsdWUgPSBKc29uVmFsdWUsXG4gIE1pbmltdW1JbnB1dFZhbHVlVCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbiAgTWluaW11bU91dHB1dFZhbHVlVCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbj4ge1xuICAvKipcbiAgICogR2V0IGEgam9iIGhhbmRsZXIuXG4gICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBqb2IgdG8gZ2V0IGEgaGFuZGxlciBmcm9tLlxuICAgKi9cbiAgZ2V0PFxuICAgIEEgZXh0ZW5kcyBNaW5pbXVtQXJndW1lbnRWYWx1ZVQsXG4gICAgSSBleHRlbmRzIE1pbmltdW1JbnB1dFZhbHVlVCxcbiAgICBPIGV4dGVuZHMgTWluaW11bU91dHB1dFZhbHVlVCxcbiAgPihuYW1lOiBKb2JOYW1lKTogT2JzZXJ2YWJsZTxKb2JIYW5kbGVyPEEsIEksIE8+IHwgbnVsbD47XG59XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIHRoYXQgY2FuIHNjaGVkdWxlIGpvYnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGVyPFxuICBNaW5pbXVtQXJndW1lbnRWYWx1ZVQgZXh0ZW5kcyBKc29uVmFsdWUgPSBKc29uVmFsdWUsXG4gIE1pbmltdW1JbnB1dFZhbHVlVCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbiAgTWluaW11bU91dHB1dFZhbHVlVCBleHRlbmRzIEpzb25WYWx1ZSA9IEpzb25WYWx1ZSxcbj4ge1xuICAvKipcbiAgICogR2V0IGEgam9iIGRlc2NyaXB0aW9uIGZvciBhIG5hbWVkIGpvYi5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIGpvYi5cbiAgICogQHJldHVybnMgQSBkZXNjcmlwdGlvbiwgb3IgbnVsbCBpZiBubyBkZXNjcmlwdGlvbiBpcyBhdmFpbGFibGUgZm9yIHRoaXMgam9iLlxuICAgKi9cbiAgZ2V0RGVzY3JpcHRpb24obmFtZTogSm9iTmFtZSk6IE9ic2VydmFibGU8Sm9iRGVzY3JpcHRpb24gfCBudWxsPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBqb2IgbmFtZSBoYXMgYmVlbiByZWdpc3RlcmVkLlxuICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgam9iLlxuICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBqb2IgZXhpc3RzLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBoYXMobmFtZTogSm9iTmFtZSk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFBhdXNlIHRoZSBzY2hlZHVsZXIsIHRlbXBvcmFyeSBxdWV1ZWluZyBfbmV3XyBqb2JzLiBSZXR1cm5zIGEgcmVzdW1lIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlXG4gICAqIHVzZWQgdG8gcmVzdW1lIGV4ZWN1dGlvbi4gSWYgbXVsdGlwbGUgYHBhdXNlKClgIHdlcmUgY2FsbGVkLCBhbGwgdGhlaXIgcmVzdW1lIGZ1bmN0aW9ucyBtdXN0XG4gICAqIGJlIGNhbGxlZCBiZWZvcmUgdGhlIFNjaGVkdWxlciBhY3R1YWxseSBzdGFydHMgbmV3IGpvYnMuIEFkZGl0aW9uYWwgY2FsbHMgdG8gdGhlIHNhbWUgcmVzdW1lXG4gICAqIGZ1bmN0aW9uIHdpbGwgaGF2ZSBubyBlZmZlY3QuXG4gICAqXG4gICAqIEpvYnMgYWxyZWFkeSBydW5uaW5nIGFyZSBOT1QgcGF1c2VkLiBUaGlzIGlzIHBhdXNpbmcgdGhlIHNjaGVkdWxlciBvbmx5LlxuICAgKlxuICAgKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHJ1biB0byByZXN1bWUgdGhlIHNjaGVkdWxlci4gSWYgbXVsdGlwbGUgYHBhdXNlKClgIGNhbGxzXG4gICAqICAgICAgICAgIHdlcmUgbWFkZSwgYWxsIHRoZWlyIHJldHVybiBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCAoaW4gYW55IG9yZGVyKSBiZWZvcmUgdGhlXG4gICAqICAgICAgICAgIHNjaGVkdWxlciBjYW4gcmVzdW1lLlxuICAgKi9cbiAgcGF1c2UoKTogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogU2NoZWR1bGUgYSBqb2IgdG8gYmUgcnVuLCB1c2luZyBpdHMgbmFtZS5cbiAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2Ygam9iIHRvIGJlIHJ1bi5cbiAgICogQHBhcmFtIGFyZ3VtZW50IFRoZSBhcmd1bWVudCB0byBzZW5kIHRvIHRoZSBqb2Igd2hlbiBzdGFydGluZyBpdC5cbiAgICogQHBhcmFtIG9wdGlvbnMgU2NoZWR1bGluZyBvcHRpb25zLlxuICAgKiBAcmV0dXJucyBUaGUgam9iIGJlaW5nIHJ1bi5cbiAgICovXG4gIHNjaGVkdWxlPFxuICAgIEEgZXh0ZW5kcyBNaW5pbXVtQXJndW1lbnRWYWx1ZVQsXG4gICAgSSBleHRlbmRzIE1pbmltdW1JbnB1dFZhbHVlVCxcbiAgICBPIGV4dGVuZHMgTWluaW11bU91dHB1dFZhbHVlVCxcbiAgPihcbiAgICBuYW1lOiBKb2JOYW1lLFxuICAgIGFyZ3VtZW50OiBBLFxuICAgIG9wdGlvbnM/OiBTY2hlZHVsZUpvYk9wdGlvbnMsXG4gICk6IEpvYjxBLCBJLCBPPjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gaXNKb2JIYW5kbGVyPFxuICBBIGV4dGVuZHMgSnNvblZhbHVlLFxuICBJIGV4dGVuZHMgSnNvblZhbHVlLFxuICBPIGV4dGVuZHMgSnNvblZhbHVlLFxuLy8gVE9ETzogdGhpcyBzaG91bGQgYmUgdW5rbm93blxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuPih2YWx1ZTogYW55KTogdmFsdWUgaXMgSm9iSGFuZGxlcjxBLCBJLCBPPiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgJiYgdHlwZW9mIHZhbHVlLmpvYkRlc2NyaXB0aW9uID09ICdvYmplY3QnXG4gICAgICAmJiB2YWx1ZS5qb2JEZXNjcmlwdGlvbiAhPT0gbnVsbDtcbn1cbiJdfQ==