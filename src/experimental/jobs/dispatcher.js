"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDispatcher = void 0;
const api_1 = require("./api");
const exception_1 = require("./exception");
/**
 * OnReady a dispatcher that can dispatch to a sub job, depending on conditions.
 * @param options
 */
function createDispatcher(options = {}) {
    let defaultDelegate = null;
    const conditionalDelegateList = [];
    const job = Object.assign((argument, context) => {
        const maybeDelegate = conditionalDelegateList.find(([predicate]) => predicate(argument));
        let delegate = null;
        if (maybeDelegate) {
            delegate = context.scheduler.schedule(maybeDelegate[1], argument);
        }
        else if (defaultDelegate) {
            delegate = context.scheduler.schedule(defaultDelegate, argument);
        }
        else {
            throw new exception_1.JobDoesNotExistException('<null>');
        }
        context.inboundBus.subscribe(delegate.inboundBus);
        return delegate.outboundBus;
    }, {
        jobDescription: options,
    });
    return Object.assign(job, {
        setDefaultJob(name) {
            if ((0, api_1.isJobHandler)(name)) {
                name = name.jobDescription.name === undefined ? null : name.jobDescription.name;
            }
            defaultDelegate = name;
        },
        addConditionalJob(predicate, name) {
            conditionalDelegateList.push([predicate, name]);
        },
        // TODO: Remove return-only generic from createDispatcher() API.
    });
}
exports.createDispatcher = createDispatcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2NvcmUvc3JjL2V4cGVyaW1lbnRhbC9qb2JzL2Rpc3BhdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7O0FBSUgsK0JBQWtHO0FBQ2xHLDJDQUF1RDtBQXFCdkQ7OztHQUdHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQzlCLFVBQThDLEVBQUU7SUFFaEQsSUFBSSxlQUFlLEdBQW1CLElBQUksQ0FBQztJQUMzQyxNQUFNLHVCQUF1QixHQUE4QyxFQUFFLENBQUM7SUFFOUUsTUFBTSxHQUFHLEdBQWdELE1BQU0sQ0FBQyxNQUFNLENBQ3BFLENBQUMsUUFBbUIsRUFBRSxPQUEwQixFQUFFLEVBQUU7UUFDbEQsTUFBTSxhQUFhLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDekYsSUFBSSxRQUFRLEdBQWdELElBQUksQ0FBQztRQUVqRSxJQUFJLGFBQWEsRUFBRTtZQUNqQixRQUFRLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ25FO2FBQU0sSUFBSSxlQUFlLEVBQUU7WUFDMUIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNsRTthQUFNO1lBQ0wsTUFBTSxJQUFJLG9DQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWxELE9BQU8sUUFBUSxDQUFDLFdBQVcsQ0FBQztJQUM5QixDQUFDLEVBQ0Q7UUFDRSxjQUFjLEVBQUUsT0FBTztLQUN4QixDQUNGLENBQUM7SUFFRixPQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ3pCLGFBQWEsQ0FBQyxJQUFrRTtZQUM5RSxJQUFJLElBQUEsa0JBQVksRUFBQyxJQUFJLENBQUMsRUFBRTtnQkFDdEIsSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQzthQUNqRjtZQUVELGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDekIsQ0FBQztRQUNELGlCQUFpQixDQUFDLFNBQXVDLEVBQUUsSUFBYTtZQUN0RSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBQ0QsZ0VBQWdFO0tBQ2pFLENBQXVDLENBQUM7QUFDM0MsQ0FBQztBQXpDRCw0Q0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgSnNvblZhbHVlIH0gZnJvbSAnLi4vLi4vanNvbi9pbmRleCc7XG5pbXBvcnQgeyBSZWFkd3JpdGUgfSBmcm9tICcuLi8uLi91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBKb2IsIEpvYkRlc2NyaXB0aW9uLCBKb2JIYW5kbGVyLCBKb2JIYW5kbGVyQ29udGV4dCwgSm9iTmFtZSwgaXNKb2JIYW5kbGVyIH0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IHsgSm9iRG9lc05vdEV4aXN0RXhjZXB0aW9uIH0gZnJvbSAnLi9leGNlcHRpb24nO1xuXG4vKipcbiAqIEEgSm9iRGlzcGF0Y2hlciBjYW4gYmUgdXNlZCB0byBkaXNwYXRjaCBiZXR3ZWVuIG11bHRpcGxlIGpvYnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSm9iRGlzcGF0Y2hlcjxBIGV4dGVuZHMgSnNvblZhbHVlLCBJIGV4dGVuZHMgSnNvblZhbHVlLCBPIGV4dGVuZHMgSnNvblZhbHVlPlxuICBleHRlbmRzIEpvYkhhbmRsZXI8QSwgSSwgTz4ge1xuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IGpvYiBpZiBhbGwgY29uZGl0aW9uYWxzIGZhaWxlZC5cbiAgICogQHBhcmFtIG5hbWUgVGhlIGRlZmF1bHQgbmFtZSBpZiBhbGwgY29uZGl0aW9ucyBhcmUgZmFsc2UuXG4gICAqL1xuICBzZXREZWZhdWx0Sm9iKG5hbWU6IEpvYk5hbWUgfCBudWxsIHwgSm9iSGFuZGxlcjxKc29uVmFsdWUsIEpzb25WYWx1ZSwgSnNvblZhbHVlPik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEFkZCBhIGNvbmRpdGlvbmFsIGpvYiB0aGF0IHdpbGwgYmUgc2VsZWN0ZWQgaWYgdGhlIGlucHV0IGZpdHMgYSBwcmVkaWNhdGUuXG4gICAqIEBwYXJhbSBwcmVkaWNhdGVcbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIGFkZENvbmRpdGlvbmFsSm9iKHByZWRpY2F0ZTogKGFyZ3M6IEEpID0+IGJvb2xlYW4sIG5hbWU6IHN0cmluZyk6IHZvaWQ7XG59XG5cbi8qKlxuICogT25SZWFkeSBhIGRpc3BhdGNoZXIgdGhhdCBjYW4gZGlzcGF0Y2ggdG8gYSBzdWIgam9iLCBkZXBlbmRpbmcgb24gY29uZGl0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaGVyPEEgZXh0ZW5kcyBKc29uVmFsdWUsIEkgZXh0ZW5kcyBKc29uVmFsdWUsIE8gZXh0ZW5kcyBKc29uVmFsdWU+KFxuICBvcHRpb25zOiBQYXJ0aWFsPFJlYWR3cml0ZTxKb2JEZXNjcmlwdGlvbj4+ID0ge30sXG4pOiBKb2JEaXNwYXRjaGVyPEEsIEksIE8+IHtcbiAgbGV0IGRlZmF1bHREZWxlZ2F0ZTogSm9iTmFtZSB8IG51bGwgPSBudWxsO1xuICBjb25zdCBjb25kaXRpb25hbERlbGVnYXRlTGlzdDogWyhhcmdzOiBKc29uVmFsdWUpID0+IGJvb2xlYW4sIEpvYk5hbWVdW10gPSBbXTtcblxuICBjb25zdCBqb2I6IEpvYkhhbmRsZXI8SnNvblZhbHVlLCBKc29uVmFsdWUsIEpzb25WYWx1ZT4gPSBPYmplY3QuYXNzaWduKFxuICAgIChhcmd1bWVudDogSnNvblZhbHVlLCBjb250ZXh0OiBKb2JIYW5kbGVyQ29udGV4dCkgPT4ge1xuICAgICAgY29uc3QgbWF5YmVEZWxlZ2F0ZSA9IGNvbmRpdGlvbmFsRGVsZWdhdGVMaXN0LmZpbmQoKFtwcmVkaWNhdGVdKSA9PiBwcmVkaWNhdGUoYXJndW1lbnQpKTtcbiAgICAgIGxldCBkZWxlZ2F0ZTogSm9iPEpzb25WYWx1ZSwgSnNvblZhbHVlLCBKc29uVmFsdWU+IHwgbnVsbCA9IG51bGw7XG5cbiAgICAgIGlmIChtYXliZURlbGVnYXRlKSB7XG4gICAgICAgIGRlbGVnYXRlID0gY29udGV4dC5zY2hlZHVsZXIuc2NoZWR1bGUobWF5YmVEZWxlZ2F0ZVsxXSwgYXJndW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChkZWZhdWx0RGVsZWdhdGUpIHtcbiAgICAgICAgZGVsZWdhdGUgPSBjb250ZXh0LnNjaGVkdWxlci5zY2hlZHVsZShkZWZhdWx0RGVsZWdhdGUsIGFyZ3VtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBKb2JEb2VzTm90RXhpc3RFeGNlcHRpb24oJzxudWxsPicpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0LmluYm91bmRCdXMuc3Vic2NyaWJlKGRlbGVnYXRlLmluYm91bmRCdXMpO1xuXG4gICAgICByZXR1cm4gZGVsZWdhdGUub3V0Ym91bmRCdXM7XG4gICAgfSxcbiAgICB7XG4gICAgICBqb2JEZXNjcmlwdGlvbjogb3B0aW9ucyxcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiAoT2JqZWN0LmFzc2lnbihqb2IsIHtcbiAgICBzZXREZWZhdWx0Sm9iKG5hbWU6IEpvYk5hbWUgfCBudWxsIHwgSm9iSGFuZGxlcjxKc29uVmFsdWUsIEpzb25WYWx1ZSwgSnNvblZhbHVlPikge1xuICAgICAgaWYgKGlzSm9iSGFuZGxlcihuYW1lKSkge1xuICAgICAgICBuYW1lID0gbmFtZS5qb2JEZXNjcmlwdGlvbi5uYW1lID09PSB1bmRlZmluZWQgPyBudWxsIDogbmFtZS5qb2JEZXNjcmlwdGlvbi5uYW1lO1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0RGVsZWdhdGUgPSBuYW1lO1xuICAgIH0sXG4gICAgYWRkQ29uZGl0aW9uYWxKb2IocHJlZGljYXRlOiAoYXJnczogSnNvblZhbHVlKSA9PiBib29sZWFuLCBuYW1lOiBKb2JOYW1lKSB7XG4gICAgICBjb25kaXRpb25hbERlbGVnYXRlTGlzdC5wdXNoKFtwcmVkaWNhdGUsIG5hbWVdKTtcbiAgICB9LFxuICAgIC8vIFRPRE86IFJlbW92ZSByZXR1cm4tb25seSBnZW5lcmljIGZyb20gY3JlYXRlRGlzcGF0Y2hlcigpIEFQSS5cbiAgfSkgYXMgdW5rbm93bikgYXMgSm9iRGlzcGF0Y2hlcjxBLCBJLCBPPjtcbn1cbiJdfQ==