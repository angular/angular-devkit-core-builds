"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepCopy = exports.mapObject = void 0;
/** @deprecated Since v12.0, unused by the Angular tooling */
function mapObject(obj, mapper) {
    return Object.keys(obj).reduce((acc, k) => {
        acc[k] = mapper(k, obj[k]);
        return acc;
    }, {});
}
exports.mapObject = mapObject;
const copySymbol = Symbol();
function deepCopy(value) {
    if (Array.isArray(value)) {
        return value.map((o) => deepCopy(o));
    }
    else if (value && typeof value === 'object') {
        const valueCasted = value;
        if (valueCasted[copySymbol]) {
            // This is a circular dependency. Just return the cloned value.
            return valueCasted[copySymbol];
        }
        if (valueCasted['toJSON']) {
            return JSON.parse(valueCasted['toJSON']());
        }
        const copy = Object.create(Object.getPrototypeOf(valueCasted));
        valueCasted[copySymbol] = copy;
        for (const key of Object.getOwnPropertyNames(valueCasted)) {
            copy[key] = deepCopy(valueCasted[key]);
        }
        valueCasted[copySymbol] = undefined;
        return copy;
    }
    else {
        return value;
    }
}
exports.deepCopy = deepCopy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhcl9kZXZraXQvY29yZS9zcmMvdXRpbHMvb2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUVILDZEQUE2RDtBQUM3RCxTQUFnQixTQUFTLENBQ3ZCLEdBQXVCLEVBQ3ZCLE1BQThCO0lBRTlCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUF1QixFQUFFLENBQVMsRUFBRSxFQUFFO1FBQ3BFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTNCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQztBQVRELDhCQVNDO0FBRUQsTUFBTSxVQUFVLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFNUIsU0FBZ0IsUUFBUSxDQUFJLEtBQVE7SUFDbEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFpQixDQUFDO0tBQ3REO1NBQU0sSUFBSSxLQUFLLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1FBQzdDLE1BQU0sV0FBVyxHQUFHLEtBS25CLENBQUM7UUFFRixJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMzQiwrREFBK0Q7WUFDL0QsT0FBTyxXQUFXLENBQUMsVUFBVSxDQUFNLENBQUM7U0FDckM7UUFFRCxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM1QztRQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQy9ELFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDL0IsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDekQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUN4QztRQUNELFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxTQUFTLENBQUM7UUFFcEMsT0FBTyxJQUFJLENBQUM7S0FDYjtTQUFNO1FBQ0wsT0FBTyxLQUFLLENBQUM7S0FDZDtBQUNILENBQUM7QUEvQkQsNEJBK0JDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKiBAZGVwcmVjYXRlZCBTaW5jZSB2MTIuMCwgdW51c2VkIGJ5IHRoZSBBbmd1bGFyIHRvb2xpbmcgKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBPYmplY3Q8VCwgVj4oXG4gIG9iajogeyBbazogc3RyaW5nXTogVCB9LFxuICBtYXBwZXI6IChrOiBzdHJpbmcsIHY6IFQpID0+IFYsXG4pOiB7IFtrOiBzdHJpbmddOiBWIH0ge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5yZWR1Y2UoKGFjYzogeyBbazogc3RyaW5nXTogViB9LCBrOiBzdHJpbmcpID0+IHtcbiAgICBhY2Nba10gPSBtYXBwZXIoaywgb2JqW2tdKTtcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cblxuY29uc3QgY29weVN5bWJvbCA9IFN5bWJvbCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVlcENvcHk8VD4odmFsdWU6IFQpOiBUIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLm1hcCgobykgPT4gZGVlcENvcHkobykpIGFzIHVua25vd24gYXMgVDtcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdmFsdWVDYXN0ZWQgPSB2YWx1ZSBhcyB7XG4gICAgICBbY29weVN5bWJvbF0/OiBUO1xuICAgICAgdG9KU09OPzogKCkgPT4gc3RyaW5nO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xuXG4gICAgaWYgKHZhbHVlQ2FzdGVkW2NvcHlTeW1ib2xdKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgY2lyY3VsYXIgZGVwZW5kZW5jeS4gSnVzdCByZXR1cm4gdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgIHJldHVybiB2YWx1ZUNhc3RlZFtjb3B5U3ltYm9sXSBhcyBUO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZUNhc3RlZFsndG9KU09OJ10pIHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlQ2FzdGVkWyd0b0pTT04nXSgpKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWVDYXN0ZWQpKTtcbiAgICB2YWx1ZUNhc3RlZFtjb3B5U3ltYm9sXSA9IGNvcHk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWVDYXN0ZWQpKSB7XG4gICAgICBjb3B5W2tleV0gPSBkZWVwQ29weSh2YWx1ZUNhc3RlZFtrZXldKTtcbiAgICB9XG4gICAgdmFsdWVDYXN0ZWRbY29weVN5bWJvbF0gPSB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gY29weTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdfQ==