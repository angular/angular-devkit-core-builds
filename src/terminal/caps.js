"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const supportsColor = require('../../third_party/github.com/chalk/supports-color');
const streamMap = new WeakMap();
function _getRows() {
    return typeof process == 'object' && process.stdout.rows || null;
}
function _getColumns() {
    return typeof process == 'object' && process.stdout.columns || null;
}
function _createCapabilities(stream, isTerminalStream, level = supportsColor.stdout.level) {
    return {
        readable: stream.readable,
        writable: stream.writable,
        text: true,
        colors: level > 0,
        color256: level > 1,
        color16m: level > 2,
        rows: isTerminalStream ? _getRows() : null,
        columns: isTerminalStream ? _getColumns() : null,
    };
}
function getCapabilities(stream, isTerminalStream = !!stream.isTTY) {
    let maybeCaps = streamMap.get(stream);
    if (!maybeCaps) {
        maybeCaps = _createCapabilities(stream, isTerminalStream);
        streamMap.set(stream, maybeCaps);
    }
    return maybeCaps;
}
exports.getCapabilities = getCapabilities;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fwcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvYW5ndWxhcl9kZXZraXQvY29yZS9zcmMvdGVybWluYWwvY2Fwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVVBLE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBcUJuRixNQUFNLFNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBMEIsQ0FBQztBQXNDeEQsU0FBUyxRQUFRO0lBQ2YsT0FBTyxPQUFPLE9BQU8sSUFBSSxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO0FBQ25FLENBQUM7QUFDRCxTQUFTLFdBQVc7SUFDbEIsT0FBTyxPQUFPLE9BQU8sSUFBSSxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDO0FBQ3RFLENBQUM7QUFHRCxTQUFTLG1CQUFtQixDQUMxQixNQUFjLEVBQ2QsZ0JBQXlCLEVBQ3pCLFFBQWlCLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSztJQUUzQyxPQUFPO1FBQ0wsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO1FBQ3pCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtRQUN6QixJQUFJLEVBQUUsSUFBSTtRQUVWLE1BQU0sRUFBRSxLQUFLLEdBQUcsQ0FBQztRQUNqQixRQUFRLEVBQUUsS0FBSyxHQUFHLENBQUM7UUFDbkIsUUFBUSxFQUFFLEtBQUssR0FBRyxDQUFDO1FBRW5CLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDMUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtLQUNqRCxDQUFDO0FBQ0osQ0FBQztBQUdELFNBQWdCLGVBQWUsQ0FDN0IsTUFBYyxFQUNkLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSztJQUVqQyxJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxTQUFTLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDMUQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDbEM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBWEQsMENBV0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pbXBvcnQgUmVhZGFibGVTdHJlYW0gPSBOb2RlSlMuUmVhZGFibGVTdHJlYW07XG5pbXBvcnQgV3JpdGVTdHJlYW0gPSBOb2RlSlMuV3JpdGVTdHJlYW07XG5pbXBvcnQgU29ja2V0ID0gTm9kZUpTLlNvY2tldDtcbmNvbnN0IHN1cHBvcnRzQ29sb3IgPSByZXF1aXJlKCcuLi8uLi90aGlyZF9wYXJ0eS9naXRodWIuY29tL2NoYWxrL3N1cHBvcnRzLWNvbG9yJyk7XG5cbi8qKlxuICogTm9kZSBzcGVjaWZpYyBzdHVmZi5cbiAqL1xuZGVjbGFyZSBjb25zdCBwcm9jZXNzOiB7XG4gIGVudjogeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XG4gIHBsYXRmb3JtOiBzdHJpbmc7XG4gIHZlcnNpb25zOiB7XG4gICAgbm9kZTogc3RyaW5nO1xuICB9O1xuXG4gIHN0ZGluOiBSZWFkYWJsZVN0cmVhbTtcbiAgc3Rkb3V0OiBXcml0ZVN0cmVhbTtcbiAgc3RkZXJyOiBXcml0ZVN0cmVhbTtcbn07XG5kZWNsYXJlIGNvbnN0IG9zOiB7XG4gIHJlbGVhc2U6ICgpID0+IHN0cmluZztcbn07XG5cblxuY29uc3Qgc3RyZWFtTWFwID0gbmV3IFdlYWtNYXA8e30sIFN0cmVhbUNhcGFiaWxpdGllcz4oKTtcblxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbUNhcGFiaWxpdGllcyB7XG4gIHJlYWRhYmxlOiBib29sZWFuO1xuICB3cml0YWJsZTogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3VwcG9ydHMgdGV4dC4gVGhpcyBzaG91bGQgYmUgdHJ1ZSBmb3IgYW55IHN0cmVhbXMuXG4gICAqL1xuICB0ZXh0OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTdXBwb3J0cyBjb2xvcnMgKDE2IGNvbG9ycykuXG4gICAqL1xuICBjb2xvcnM6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFN1cHBvcnRzIDI1NiBjb2xvcnMuXG4gICAqL1xuICBjb2xvcjI1NjogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3VwcG9ydHMgMTYgbWlsbGlvbnMgKDN4OC1iaXQgY2hhbm5lbHMpIGNvbG9ycy5cbiAgICovXG4gIGNvbG9yMTZtOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBIZWlnaHQgb2YgdGhlIHRlcm1pbmFsLiBJZiB0aGUgc3RyZWFtIGlzIG5vdCB0aWVkIHRvIGEgdGVybWluYWwsIHdpbGwgYmUgbnVsbC5cbiAgICovXG4gIHJvd3M6IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdpZHRoIG9mIHRoZSB0ZXJtaW5hbC4gSWYgdGhlIHN0cmVhbSBpcyBub3QgdGllZCB0byBhIHRlcm1pbmFsLCB3aWxsIGJlIG51bGwuXG4gICAqL1xuICBjb2x1bW5zOiBudW1iZXIgfCBudWxsO1xufVxuXG5mdW5jdGlvbiBfZ2V0Um93cygpIHtcbiAgcmV0dXJuIHR5cGVvZiBwcm9jZXNzID09ICdvYmplY3QnICYmIHByb2Nlc3Muc3Rkb3V0LnJvd3MgfHwgbnVsbDtcbn1cbmZ1bmN0aW9uIF9nZXRDb2x1bW5zKCkge1xuICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgPT0gJ29iamVjdCcgJiYgcHJvY2Vzcy5zdGRvdXQuY29sdW1ucyB8fCBudWxsO1xufVxuXG5cbmZ1bmN0aW9uIF9jcmVhdGVDYXBhYmlsaXRpZXMoXG4gIHN0cmVhbTogU29ja2V0LFxuICBpc1Rlcm1pbmFsU3RyZWFtOiBib29sZWFuLFxuICBsZXZlbDogMHwxfDJ8MyA9IHN1cHBvcnRzQ29sb3Iuc3Rkb3V0LmxldmVsLFxuKTogU3RyZWFtQ2FwYWJpbGl0aWVzIHtcbiAgcmV0dXJuIHtcbiAgICByZWFkYWJsZTogc3RyZWFtLnJlYWRhYmxlLFxuICAgIHdyaXRhYmxlOiBzdHJlYW0ud3JpdGFibGUsXG4gICAgdGV4dDogdHJ1ZSxcblxuICAgIGNvbG9yczogbGV2ZWwgPiAwLFxuICAgIGNvbG9yMjU2OiBsZXZlbCA+IDEsXG4gICAgY29sb3IxNm06IGxldmVsID4gMixcblxuICAgIHJvd3M6IGlzVGVybWluYWxTdHJlYW0gPyBfZ2V0Um93cygpIDogbnVsbCxcbiAgICBjb2x1bW5zOiBpc1Rlcm1pbmFsU3RyZWFtID8gX2dldENvbHVtbnMoKSA6IG51bGwsXG4gIH07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhcGFiaWxpdGllcyhcbiAgc3RyZWFtOiBTb2NrZXQsXG4gIGlzVGVybWluYWxTdHJlYW0gPSAhIXN0cmVhbS5pc1RUWSxcbik6IFN0cmVhbUNhcGFiaWxpdGllcyB7XG4gIGxldCBtYXliZUNhcHMgPSBzdHJlYW1NYXAuZ2V0KHN0cmVhbSk7XG4gIGlmICghbWF5YmVDYXBzKSB7XG4gICAgbWF5YmVDYXBzID0gX2NyZWF0ZUNhcGFiaWxpdGllcyhzdHJlYW0sIGlzVGVybWluYWxTdHJlYW0pO1xuICAgIHN0cmVhbU1hcC5zZXQoc3RyZWFtLCBtYXliZUNhcHMpO1xuICB9XG5cbiAgcmV0dXJuIG1heWJlQ2Fwcztcbn1cbiJdfQ==