"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonWorkspaceMetadata = exports.JsonWorkspaceSymbol = void 0;
exports.JsonWorkspaceSymbol = Symbol.for('@angular/core:workspace-json');
class JsonWorkspaceMetadata {
    constructor(filePath, ast, raw) {
        this.filePath = filePath;
        this.ast = ast;
        this.raw = raw;
        this.changes = [];
    }
    get hasChanges() {
        return this.changes.length > 0;
    }
    get changeCount() {
        return this.changes.length;
    }
    findChangesForPath(path) {
        return this.changes.filter((c) => c.path === path);
    }
    addChange(op, path, node, value, type) {
        // Remove redundant operations
        if (op === 'remove' || op === 'replace') {
            for (let i = this.changes.length - 1; i >= 0; --i) {
                const currentPath = this.changes[i].path;
                if (currentPath === path || currentPath.startsWith(path + '/')) {
                    if (op === 'replace' && currentPath === path && this.changes[i].op === 'add') {
                        op = 'add';
                    }
                    this.changes.splice(i, 1);
                }
            }
        }
        this.changes.push({ op, path, node, value, type: op === 'remove' || !type ? 'json' : type });
    }
    reset() {
        this.changes.length = 0;
    }
}
exports.JsonWorkspaceMetadata = JsonWorkspaceMetadata;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9jb3JlL3NyYy93b3Jrc3BhY2UvanNvbi9tZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7OztHQU1HOzs7QUFNVSxRQUFBLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQXVCOUUsTUFBYSxxQkFBcUI7SUFHaEMsWUFBcUIsUUFBZ0IsRUFBVyxHQUFrQixFQUFXLEdBQVc7UUFBbkUsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUFXLFFBQUcsR0FBSCxHQUFHLENBQWU7UUFBVyxRQUFHLEdBQUgsR0FBRyxDQUFRO1FBRi9FLFlBQU8sR0FBaUIsRUFBRSxDQUFDO0lBRXVELENBQUM7SUFFNUYsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQztJQUVELGtCQUFrQixDQUFDLElBQVk7UUFDN0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsU0FBUyxDQUNQLEVBQWdDLEVBQ2hDLElBQVksRUFDWixJQUFvRCxFQUNwRCxLQUF1QixFQUN2QixJQUFRO1FBRVIsOEJBQThCO1FBQzlCLElBQUksRUFBRSxLQUFLLFFBQVEsSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO1lBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ2pELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUN6QyxJQUFJLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7b0JBQzlELElBQUksRUFBRSxLQUFLLFNBQVMsSUFBSSxXQUFXLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEtBQUssRUFBRTt3QkFDNUUsRUFBRSxHQUFHLEtBQUssQ0FBQztxQkFDWjtvQkFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQzNCO2FBQ0Y7U0FDRjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDMUIsQ0FBQztDQUNGO0FBM0NELHNEQTJDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBKc29uVmFsdWUgfSBmcm9tICcuLi8uLi9qc29uJztcbmltcG9ydCB7IEpzb25Bc3RBcnJheSwgSnNvbkFzdEtleVZhbHVlLCBKc29uQXN0Tm9kZSwgSnNvbkFzdE9iamVjdCB9IGZyb20gJy4uLy4uL2pzb24vcGFyc2VyX2FzdCc7XG5pbXBvcnQgeyBQcm9qZWN0RGVmaW5pdGlvbiwgVGFyZ2V0RGVmaW5pdGlvbiwgV29ya3NwYWNlRGVmaW5pdGlvbiB9IGZyb20gJy4uL2RlZmluaXRpb25zJztcblxuZXhwb3J0IGNvbnN0IEpzb25Xb3Jrc3BhY2VTeW1ib2wgPSBTeW1ib2wuZm9yKCdAYW5ndWxhci9jb3JlOndvcmtzcGFjZS1qc29uJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnNvbldvcmtzcGFjZURlZmluaXRpb24gZXh0ZW5kcyBXb3Jrc3BhY2VEZWZpbml0aW9uIHtcbiAgW0pzb25Xb3Jrc3BhY2VTeW1ib2xdOiBKc29uV29ya3NwYWNlTWV0YWRhdGE7XG59XG5cbmludGVyZmFjZSBDaGFuZ2VWYWx1ZXMge1xuICBqc29uOiBKc29uVmFsdWU7XG4gIHByb2plY3Q6IFByb2plY3REZWZpbml0aW9uO1xuICB0YXJnZXQ6IFRhcmdldERlZmluaXRpb247XG4gIHByb2plY3Rjb2xsZWN0aW9uOiBJdGVyYWJsZTxbc3RyaW5nLCBQcm9qZWN0RGVmaW5pdGlvbl0+O1xuICB0YXJnZXRjb2xsZWN0aW9uOiBJdGVyYWJsZTxbc3RyaW5nLCBUYXJnZXREZWZpbml0aW9uXT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnNvbkNoYW5nZTxUIGV4dGVuZHMga2V5b2YgQ2hhbmdlVmFsdWVzID0ga2V5b2YgQ2hhbmdlVmFsdWVzPiB7XG4gIC8vIGNvcmUgY29sbGVjdGlvbnMgY2FuIG9ubHkgYmUgYWRkZWQgYXMgdGhleSBhcmUgbWFuYWdlZCBkaXJlY3RseSBieSBfQ29sbGVjdGlvbl8gb2JqZWN0c1xuICBvcDogVCBleHRlbmRzICdqc29uJyB8ICdwcm9qZWN0JyB8ICd0YXJnZXQnID8gJ2FkZCcgfCAncmVtb3ZlJyB8ICdyZXBsYWNlJyA6ICdhZGQnO1xuICBwYXRoOiBzdHJpbmc7XG4gIG5vZGU6IEpzb25Bc3ROb2RlIHwgSnNvbkFzdEtleVZhbHVlO1xuICB2YWx1ZT86IENoYW5nZVZhbHVlc1tUXTtcbiAgdHlwZTogVDtcbn1cblxuZXhwb3J0IGNsYXNzIEpzb25Xb3Jrc3BhY2VNZXRhZGF0YSB7XG4gIHJlYWRvbmx5IGNoYW5nZXM6IEpzb25DaGFuZ2VbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGZpbGVQYXRoOiBzdHJpbmcsIHJlYWRvbmx5IGFzdDogSnNvbkFzdE9iamVjdCwgcmVhZG9ubHkgcmF3OiBzdHJpbmcpIHt9XG5cbiAgZ2V0IGhhc0NoYW5nZXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZ2V0IGNoYW5nZUNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbmdlcy5sZW5ndGg7XG4gIH1cblxuICBmaW5kQ2hhbmdlc0ZvclBhdGgocGF0aDogc3RyaW5nKTogSnNvbkNoYW5nZVtdIHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VzLmZpbHRlcigoYykgPT4gYy5wYXRoID09PSBwYXRoKTtcbiAgfVxuXG4gIGFkZENoYW5nZTxUIGV4dGVuZHMga2V5b2YgQ2hhbmdlVmFsdWVzID0ga2V5b2YgQ2hhbmdlVmFsdWVzPihcbiAgICBvcDogJ2FkZCcgfCAncmVtb3ZlJyB8ICdyZXBsYWNlJyxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgbm9kZTogSnNvbkFzdEFycmF5IHwgSnNvbkFzdE9iamVjdCB8IEpzb25Bc3RLZXlWYWx1ZSxcbiAgICB2YWx1ZT86IENoYW5nZVZhbHVlc1tUXSxcbiAgICB0eXBlPzogVCxcbiAgKTogdm9pZCB7XG4gICAgLy8gUmVtb3ZlIHJlZHVuZGFudCBvcGVyYXRpb25zXG4gICAgaWYgKG9wID09PSAncmVtb3ZlJyB8fCBvcCA9PT0gJ3JlcGxhY2UnKSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5jaGFuZ2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gdGhpcy5jaGFuZ2VzW2ldLnBhdGg7XG4gICAgICAgIGlmIChjdXJyZW50UGF0aCA9PT0gcGF0aCB8fCBjdXJyZW50UGF0aC5zdGFydHNXaXRoKHBhdGggKyAnLycpKSB7XG4gICAgICAgICAgaWYgKG9wID09PSAncmVwbGFjZScgJiYgY3VycmVudFBhdGggPT09IHBhdGggJiYgdGhpcy5jaGFuZ2VzW2ldLm9wID09PSAnYWRkJykge1xuICAgICAgICAgICAgb3AgPSAnYWRkJztcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jaGFuZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2hhbmdlcy5wdXNoKHsgb3AsIHBhdGgsIG5vZGUsIHZhbHVlLCB0eXBlOiBvcCA9PT0gJ3JlbW92ZScgfHwgIXR5cGUgPyAnanNvbicgOiB0eXBlIH0pO1xuICB9XG5cbiAgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5jaGFuZ2VzLmxlbmd0aCA9IDA7XG4gIH1cbn1cbiJdfQ==