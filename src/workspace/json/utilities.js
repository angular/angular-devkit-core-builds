"use strict";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVirtualAstObject = exports.unescapeKey = exports.escapeKey = void 0;
const stableStringify = require('fast-json-stable-stringify');
function findNode(parent, p) {
    if (parent.kind === 'object') {
        const entry = parent.properties.find((entry) => entry.key.value === p);
        if (entry) {
            return { node: entry.value, parent: entry };
        }
    }
    else {
        const index = Number(p);
        if (!isNaN(index)) {
            return { node: parent.elements[index], parent };
        }
    }
    return { parent };
}
function createPropertyDescriptor(value) {
    return {
        configurable: true,
        enumerable: true,
        writable: true,
        value,
    };
}
function escapeKey(key) {
    if (typeof key === 'number') {
        return key;
    }
    return key.replace('~', '~0').replace('/', '~1');
}
exports.escapeKey = escapeKey;
function unescapeKey(key) {
    if (typeof key === 'number') {
        return key;
    }
    return key.replace('~1', '/').replace('~0', '~');
}
exports.unescapeKey = unescapeKey;
function createVirtualAstObject(root, options = {}) {
    const reporter = (path, parent, node, old, current) => {
        if (options.listener) {
            if (old === current || stableStringify(old) === stableStringify(current)) {
                return;
            }
            const op = old === undefined ? 'add' : current === undefined ? 'remove' : 'replace';
            options.listener(op, path, parent, current);
        }
    };
    return create(root, '', reporter, new Set(options.exclude), options.include && options.include.length > 0 ? new Set(options.include) : undefined, options.base);
}
exports.createVirtualAstObject = createVirtualAstObject;
function create(ast, path, reporter, excluded = new Set(), included, base) {
    const cache = new Map();
    const alteredNodes = new Set();
    if (!base) {
        if (ast.kind === 'object') {
            base = Object.create(null);
        }
        else {
            base = [];
            base.length = ast.elements.length;
        }
    }
    return new Proxy(base, {
        getOwnPropertyDescriptor(target, p) {
            const descriptor = Reflect.getOwnPropertyDescriptor(target, p);
            if (descriptor || typeof p === 'symbol') {
                return descriptor;
            }
            else if (excluded.has(p) || (included && !included.has(p))) {
                return undefined;
            }
            const propertyPath = path + '/' + escapeKey(p);
            const cacheEntry = cache.get(propertyPath);
            if (cacheEntry) {
                if (cacheEntry.value !== undefined) {
                    return createPropertyDescriptor(cacheEntry.value);
                }
                return undefined;
            }
            const { node } = findNode(ast, p);
            if (node) {
                return createPropertyDescriptor(node.value);
            }
            return undefined;
        },
        has(target, p) {
            if (Reflect.has(target, p)) {
                return true;
            }
            else if (typeof p === 'symbol' || excluded.has(p)) {
                return false;
            }
            return cache.has(path + '/' + escapeKey(p)) || findNode(ast, p) !== undefined;
        },
        get(target, p) {
            if (typeof p === 'symbol' || Reflect.has(target, p)) {
                return Reflect.get(target, p);
            }
            else if (excluded.has(p) || (included && !included.has(p))) {
                return undefined;
            }
            const propertyPath = path + '/' + escapeKey(p);
            const cacheEntry = cache.get(propertyPath);
            if (cacheEntry) {
                return cacheEntry.value;
            }
            const { node, parent } = findNode(ast, p);
            let value;
            if (node) {
                if (node.kind === 'object' || node.kind === 'array') {
                    value = create(node, propertyPath, (path, parent, vnode, old, current) => {
                        if (!alteredNodes.has(node)) {
                            reporter(path, parent, vnode, old, current);
                        }
                    });
                }
                else {
                    value = node.value;
                }
                cache.set(propertyPath, { node, parent, value });
            }
            return value;
        },
        set(target, p, value) {
            if (value === undefined) {
                // setting to undefined is equivalent to a delete
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return this.deleteProperty(target, p);
            }
            if (typeof p === 'symbol' || Reflect.has(target, p)) {
                return Reflect.set(target, p, value);
            }
            else if (excluded.has(p) || (included && !included.has(p))) {
                return false;
            }
            // TODO: Check if is JSON value
            const jsonValue = value;
            const propertyPath = path + '/' + escapeKey(p);
            const cacheEntry = cache.get(propertyPath);
            if (cacheEntry) {
                const oldValue = cacheEntry.value;
                cacheEntry.value = value;
                if (cacheEntry.node && oldValue !== value) {
                    alteredNodes.add(cacheEntry.node);
                }
                reporter(propertyPath, cacheEntry.parent, cacheEntry.node, oldValue, jsonValue);
            }
            else {
                const { node, parent } = findNode(ast, p);
                cache.set(propertyPath, { node, parent, value: value });
                if (node && node.value !== value) {
                    alteredNodes.add(node);
                }
                reporter(propertyPath, parent, node, node && node.value, value);
            }
            return true;
        },
        deleteProperty(target, p) {
            if (typeof p === 'symbol' || Reflect.has(target, p)) {
                return Reflect.deleteProperty(target, p);
            }
            else if (excluded.has(p) || (included && !included.has(p))) {
                return false;
            }
            const propertyPath = path + '/' + escapeKey(p);
            const cacheEntry = cache.get(propertyPath);
            if (cacheEntry) {
                const oldValue = cacheEntry.value;
                cacheEntry.value = undefined;
                if (cacheEntry.node) {
                    alteredNodes.add(cacheEntry.node);
                }
                if (cacheEntry.parent.kind === 'keyvalue') {
                    // Remove the entire key/value pair from this JSON object
                    reporter(propertyPath, ast, cacheEntry.node, oldValue, undefined);
                }
                else {
                    reporter(propertyPath, cacheEntry.parent, cacheEntry.node, oldValue, undefined);
                }
            }
            else {
                const { node, parent } = findNode(ast, p);
                if (node) {
                    cache.set(propertyPath, { node, parent, value: undefined });
                    alteredNodes.add(node);
                    if (parent.kind === 'keyvalue') {
                        // Remove the entire key/value pair from this JSON object
                        reporter(propertyPath, ast, node, node && node.value, undefined);
                    }
                    else {
                        reporter(propertyPath, parent, node, node && node.value, undefined);
                    }
                }
            }
            return true;
        },
        defineProperty(target, p, attributes) {
            if (typeof p === 'symbol') {
                return Reflect.defineProperty(target, p, attributes);
            }
            return false;
        },
        ownKeys(target) {
            let keys;
            if (ast.kind === 'object') {
                keys = ast.properties
                    .map((entry) => entry.key.value)
                    .filter((p) => !excluded.has(p) && (!included || included.has(p)));
            }
            else {
                keys = [];
            }
            for (const key of cache.keys()) {
                const relativeKey = key.substr(path.length + 1);
                if (relativeKey.length > 0 && !relativeKey.includes('/')) {
                    keys.push(`${unescapeKey(relativeKey)}`);
                }
            }
            return [...new Set([...keys, ...Reflect.ownKeys(target)])];
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvYW5ndWxhcl9kZXZraXQvY29yZS9zcmMvd29ya3NwYWNlL2pzb24vdXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7O0dBTUc7OztBQUtILE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBMkI5RCxTQUFTLFFBQVEsQ0FDZixNQUFvQyxFQUNwQyxDQUFtQjtJQUVuQixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDN0M7S0FDRjtTQUFNO1FBQ0wsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDO1NBQ2pEO0tBQ0Y7SUFFRCxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDcEIsQ0FBQztBQUVELFNBQVMsd0JBQXdCLENBQUMsS0FBNEI7SUFDNUQsT0FBTztRQUNMLFlBQVksRUFBRSxJQUFJO1FBQ2xCLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLFFBQVEsRUFBRSxJQUFJO1FBQ2QsS0FBSztLQUNOLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLEdBQW9CO0lBQzVDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQzNCLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQU5ELDhCQU1DO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLEdBQW9CO0lBQzlDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQzNCLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQU5ELGtDQU1DO0FBRUQsU0FBZ0Isc0JBQXNCLENBQ3BDLElBQW1CLEVBQ25CLFVBS0ksRUFBRTtJQUVOLE1BQU0sUUFBUSxHQUFtQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUNwRSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDcEIsSUFBSSxHQUFHLEtBQUssT0FBTyxJQUFJLGVBQWUsQ0FBQyxHQUFHLENBQUMsS0FBSyxlQUFlLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3hFLE9BQU87YUFDUjtZQUVELE1BQU0sRUFBRSxHQUFHLEdBQUcsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDcEYsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUMsQ0FBQztJQUVGLE9BQU8sTUFBTSxDQUNYLElBQUksRUFDSixFQUFFLEVBQ0YsUUFBUSxFQUNSLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDeEIsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUNwRixPQUFPLENBQUMsSUFBSSxDQUNSLENBQUM7QUFDVCxDQUFDO0FBNUJELHdEQTRCQztBQUVELFNBQVMsTUFBTSxDQUNiLEdBQWlDLEVBQ2pDLElBQVksRUFDWixRQUF3QixFQUN4QixXQUFXLElBQUksR0FBRyxFQUFvQixFQUN0QyxRQUFnQyxFQUNoQyxJQUFhO0lBRWIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQXNCLENBQUM7SUFDNUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztJQUU1QyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUN6QixJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQVcsQ0FBQztTQUN0QzthQUFNO1lBQ0wsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNULElBQXVCLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1NBQ3ZEO0tBQ0Y7SUFFRCxPQUFPLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtRQUNyQix3QkFBd0IsQ0FBQyxNQUFVLEVBQUUsQ0FBbUI7WUFDdEQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvRCxJQUFJLFVBQVUsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ3ZDLE9BQU8sVUFBVSxDQUFDO2FBQ25CO2lCQUFNLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDNUQsT0FBTyxTQUFTLENBQUM7YUFDbEI7WUFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNDLElBQUksVUFBVSxFQUFFO2dCQUNkLElBQUksVUFBVSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7b0JBQ2xDLE9BQU8sd0JBQXdCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNuRDtnQkFFRCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtZQUVELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLElBQUksSUFBSSxFQUFFO2dCQUNSLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzdDO1lBRUQsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztRQUNELEdBQUcsQ0FBQyxNQUFVLEVBQUUsQ0FBbUI7WUFDakMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDMUIsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNuRCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUM7UUFDaEYsQ0FBQztRQUNELEdBQUcsQ0FBQyxNQUFVLEVBQUUsQ0FBbUI7WUFDakMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25ELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDL0I7aUJBQU0sSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM1RCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtZQUVELE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDM0MsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDO2FBQ3pCO1lBRUQsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFDLElBQUksS0FBSyxDQUFDO1lBQ1YsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtvQkFDbkQsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFO3dCQUN2RSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTs0QkFDM0IsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQzt5QkFDN0M7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7cUJBQU07b0JBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7aUJBQ3BCO2dCQUVELEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2FBQ2xEO1lBRUQsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBQ0QsR0FBRyxDQUFDLE1BQVUsRUFBRSxDQUFtQixFQUFFLEtBQWM7WUFDakQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUN2QixpREFBaUQ7Z0JBQ2pELG9FQUFvRTtnQkFDcEUsT0FBTyxJQUFJLENBQUMsY0FBZSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQzthQUN4QztZQUVELElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUNuRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN0QztpQkFBTSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVELE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFFRCwrQkFBK0I7WUFDL0IsTUFBTSxTQUFTLEdBQUcsS0FBa0IsQ0FBQztZQUVyQyxNQUFNLFlBQVksR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNDLElBQUksVUFBVSxFQUFFO2dCQUNkLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQ2xDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsS0FBa0IsQ0FBQztnQkFDdEMsSUFBSSxVQUFVLENBQUMsSUFBSSxJQUFJLFFBQVEsS0FBSyxLQUFLLEVBQUU7b0JBQ3pDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNuQztnQkFDRCxRQUFRLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDakY7aUJBQU07Z0JBQ0wsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQWtCLEVBQUUsQ0FBQyxDQUFDO2dCQUNyRSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtvQkFDaEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDeEI7Z0JBQ0QsUUFBUSxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQWtCLENBQUMsQ0FBQzthQUM5RTtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELGNBQWMsQ0FBQyxNQUFVLEVBQUUsQ0FBbUI7WUFDNUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25ELE9BQU8sT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDMUM7aUJBQU0sSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM1RCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMzQyxJQUFJLFVBQVUsRUFBRTtnQkFDZCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO2dCQUNsQyxVQUFVLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztnQkFDN0IsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFO29CQUNuQixZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDbkM7Z0JBQ0QsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7b0JBQ3pDLHlEQUF5RDtvQkFDekQsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7aUJBQ25FO3FCQUFNO29CQUNMLFFBQVEsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztpQkFDakY7YUFDRjtpQkFBTTtnQkFDTCxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLElBQUksSUFBSSxFQUFFO29CQUNSLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztvQkFDNUQsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDdkIsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTt3QkFDOUIseURBQXlEO3dCQUN6RCxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7cUJBQ2xFO3lCQUFNO3dCQUNMLFFBQVEsQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztxQkFDckU7aUJBQ0Y7YUFDRjtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELGNBQWMsQ0FBQyxNQUFVLEVBQUUsQ0FBbUIsRUFBRSxVQUE4QjtZQUM1RSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDekIsT0FBTyxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDdEQ7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFDRCxPQUFPLENBQUMsTUFBVTtZQUNoQixJQUFJLElBQXdCLENBQUM7WUFDN0IsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDekIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVO3FCQUNsQixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO3FCQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RFO2lCQUFNO2dCQUNMLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtZQUVELEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUM5QixNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDMUM7YUFDRjtZQUVELE9BQU8sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IEpzb25PYmplY3QsIEpzb25WYWx1ZSB9IGZyb20gJy4uLy4uL2pzb24nO1xuaW1wb3J0IHsgSnNvbkFzdEFycmF5LCBKc29uQXN0S2V5VmFsdWUsIEpzb25Bc3ROb2RlLCBKc29uQXN0T2JqZWN0IH0gZnJvbSAnLi4vLi4vanNvbi9wYXJzZXJfYXN0JztcblxuY29uc3Qgc3RhYmxlU3RyaW5naWZ5ID0gcmVxdWlyZSgnZmFzdC1qc29uLXN0YWJsZS1zdHJpbmdpZnknKTtcblxuaW50ZXJmYWNlIENhY2hlRW50cnkge1xuICB2YWx1ZT86IEpzb25WYWx1ZTtcbiAgbm9kZT86IEpzb25Bc3ROb2RlO1xuICBwYXJlbnQ6IEpzb25Bc3RBcnJheSB8IEpzb25Bc3RLZXlWYWx1ZSB8IEpzb25Bc3RPYmplY3Q7XG59XG5cbmV4cG9ydCB0eXBlIENoYW5nZUxpc3RlbmVyID0gKFxuICBvcDogJ2FkZCcgfCAncmVtb3ZlJyB8ICdyZXBsYWNlJyxcbiAgcGF0aDogc3RyaW5nLFxuICBub2RlOiBKc29uQXN0QXJyYXkgfCBKc29uQXN0T2JqZWN0IHwgSnNvbkFzdEtleVZhbHVlLFxuICB2YWx1ZT86IEpzb25WYWx1ZSxcbikgPT4gdm9pZDtcblxudHlwZSBDaGFuZ2VSZXBvcnRlciA9IChcbiAgcGF0aDogc3RyaW5nLFxuICBwYXJlbnQ6IEpzb25Bc3RBcnJheSB8IEpzb25Bc3RLZXlWYWx1ZSB8IEpzb25Bc3RPYmplY3QsXG4gIG5vZGU/OiBKc29uQXN0Tm9kZSxcbiAgb2xkPzogSnNvblZhbHVlLFxuICBjdXJyZW50PzogSnNvblZhbHVlLFxuKSA9PiB2b2lkO1xuXG4vLyBsaWIuZXM1IFByb3BlcnR5S2V5IGlzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCB3aGljaCBkb2Vzbid0IG92ZXJsYXAgUHJveHlIYW5kbGVyIFByb3BlcnR5S2V5IHdoaWNoIGlzIHN0cmluZyB8IHN5bWJvbC5cbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzQyODk0XG50eXBlIFByb3h5UHJvcGVydHlLZXkgPSBzdHJpbmcgfCBzeW1ib2w7XG5cbmZ1bmN0aW9uIGZpbmROb2RlKFxuICBwYXJlbnQ6IEpzb25Bc3RBcnJheSB8IEpzb25Bc3RPYmplY3QsXG4gIHA6IFByb3h5UHJvcGVydHlLZXksXG4pOiB7IG5vZGU/OiBKc29uQXN0Tm9kZTsgcGFyZW50OiBKc29uQXN0QXJyYXkgfCBKc29uQXN0S2V5VmFsdWUgfCBKc29uQXN0T2JqZWN0IH0ge1xuICBpZiAocGFyZW50LmtpbmQgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgZW50cnkgPSBwYXJlbnQucHJvcGVydGllcy5maW5kKChlbnRyeSkgPT4gZW50cnkua2V5LnZhbHVlID09PSBwKTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHJldHVybiB7IG5vZGU6IGVudHJ5LnZhbHVlLCBwYXJlbnQ6IGVudHJ5IH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKHApO1xuICAgIGlmICghaXNOYU4oaW5kZXgpKSB7XG4gICAgICByZXR1cm4geyBub2RlOiBwYXJlbnQuZWxlbWVudHNbaW5kZXhdLCBwYXJlbnQgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBwYXJlbnQgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQpOiBQcm9wZXJ0eURlc2NyaXB0b3Ige1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlS2V5KGtleTogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHwgbnVtYmVyIHtcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHJldHVybiBrZXkucmVwbGFjZSgnficsICd+MCcpLnJlcGxhY2UoJy8nLCAnfjEnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuZXNjYXBlS2V5KGtleTogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHwgbnVtYmVyIHtcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHJldHVybiBrZXkucmVwbGFjZSgnfjEnLCAnLycpLnJlcGxhY2UoJ34wJywgJ34nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVZpcnR1YWxBc3RPYmplY3Q8VCBleHRlbmRzIG9iamVjdCA9IEpzb25PYmplY3Q+KFxuICByb290OiBKc29uQXN0T2JqZWN0LFxuICBvcHRpb25zOiB7XG4gICAgZXhjbHVkZT86IHN0cmluZ1tdO1xuICAgIGluY2x1ZGU/OiBzdHJpbmdbXTtcbiAgICBsaXN0ZW5lcj86IENoYW5nZUxpc3RlbmVyO1xuICAgIGJhc2U/OiBvYmplY3Q7XG4gIH0gPSB7fSxcbik6IFQge1xuICBjb25zdCByZXBvcnRlcjogQ2hhbmdlUmVwb3J0ZXIgPSAocGF0aCwgcGFyZW50LCBub2RlLCBvbGQsIGN1cnJlbnQpID0+IHtcbiAgICBpZiAob3B0aW9ucy5saXN0ZW5lcikge1xuICAgICAgaWYgKG9sZCA9PT0gY3VycmVudCB8fCBzdGFibGVTdHJpbmdpZnkob2xkKSA9PT0gc3RhYmxlU3RyaW5naWZ5KGN1cnJlbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgb3AgPSBvbGQgPT09IHVuZGVmaW5lZCA/ICdhZGQnIDogY3VycmVudCA9PT0gdW5kZWZpbmVkID8gJ3JlbW92ZScgOiAncmVwbGFjZSc7XG4gICAgICBvcHRpb25zLmxpc3RlbmVyKG9wLCBwYXRoLCBwYXJlbnQsIGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gY3JlYXRlKFxuICAgIHJvb3QsXG4gICAgJycsXG4gICAgcmVwb3J0ZXIsXG4gICAgbmV3IFNldChvcHRpb25zLmV4Y2x1ZGUpLFxuICAgIG9wdGlvbnMuaW5jbHVkZSAmJiBvcHRpb25zLmluY2x1ZGUubGVuZ3RoID4gMCA/IG5ldyBTZXQob3B0aW9ucy5pbmNsdWRlKSA6IHVuZGVmaW5lZCxcbiAgICBvcHRpb25zLmJhc2UsXG4gICkgYXMgVDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKFxuICBhc3Q6IEpzb25Bc3RPYmplY3QgfCBKc29uQXN0QXJyYXksXG4gIHBhdGg6IHN0cmluZyxcbiAgcmVwb3J0ZXI6IENoYW5nZVJlcG9ydGVyLFxuICBleGNsdWRlZCA9IG5ldyBTZXQ8UHJveHlQcm9wZXJ0eUtleT4oKSxcbiAgaW5jbHVkZWQ/OiBTZXQ8UHJveHlQcm9wZXJ0eUtleT4sXG4gIGJhc2U/OiBvYmplY3QsXG4pIHtcbiAgY29uc3QgY2FjaGUgPSBuZXcgTWFwPHN0cmluZywgQ2FjaGVFbnRyeT4oKTtcbiAgY29uc3QgYWx0ZXJlZE5vZGVzID0gbmV3IFNldDxKc29uQXN0Tm9kZT4oKTtcblxuICBpZiAoIWJhc2UpIHtcbiAgICBpZiAoYXN0LmtpbmQgPT09ICdvYmplY3QnKSB7XG4gICAgICBiYXNlID0gT2JqZWN0LmNyZWF0ZShudWxsKSBhcyBvYmplY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UgPSBbXTtcbiAgICAgIChiYXNlIGFzIEFycmF5PHVua25vd24+KS5sZW5ndGggPSBhc3QuZWxlbWVudHMubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgUHJveHkoYmFzZSwge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQ6IHt9LCBwOiBQcm94eVByb3BlcnR5S2V5KTogUHJvcGVydHlEZXNjcmlwdG9yIHwgdW5kZWZpbmVkIHtcbiAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHApO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgfHwgdHlwZW9mIHAgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgfSBlbHNlIGlmIChleGNsdWRlZC5oYXMocCkgfHwgKGluY2x1ZGVkICYmICFpbmNsdWRlZC5oYXMocCkpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb3BlcnR5UGF0aCA9IHBhdGggKyAnLycgKyBlc2NhcGVLZXkocCk7XG4gICAgICBjb25zdCBjYWNoZUVudHJ5ID0gY2FjaGUuZ2V0KHByb3BlcnR5UGF0aCk7XG4gICAgICBpZiAoY2FjaGVFbnRyeSkge1xuICAgICAgICBpZiAoY2FjaGVFbnRyeS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihjYWNoZUVudHJ5LnZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgbm9kZSB9ID0gZmluZE5vZGUoYXN0LCBwKTtcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3Iobm9kZS52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0OiB7fSwgcDogUHJveHlQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgICAgaWYgKFJlZmxlY3QuaGFzKHRhcmdldCwgcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwID09PSAnc3ltYm9sJyB8fCBleGNsdWRlZC5oYXMocCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FjaGUuaGFzKHBhdGggKyAnLycgKyBlc2NhcGVLZXkocCkpIHx8IGZpbmROb2RlKGFzdCwgcCkgIT09IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQ6IHt9LCBwOiBQcm94eVByb3BlcnR5S2V5KTogdW5rbm93biB7XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzeW1ib2wnIHx8IFJlZmxlY3QuaGFzKHRhcmdldCwgcCkpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcCk7XG4gICAgICB9IGVsc2UgaWYgKGV4Y2x1ZGVkLmhhcyhwKSB8fCAoaW5jbHVkZWQgJiYgIWluY2x1ZGVkLmhhcyhwKSkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcGVydHlQYXRoID0gcGF0aCArICcvJyArIGVzY2FwZUtleShwKTtcbiAgICAgIGNvbnN0IGNhY2hlRW50cnkgPSBjYWNoZS5nZXQocHJvcGVydHlQYXRoKTtcbiAgICAgIGlmIChjYWNoZUVudHJ5KSB7XG4gICAgICAgIHJldHVybiBjYWNoZUVudHJ5LnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IG5vZGUsIHBhcmVudCB9ID0gZmluZE5vZGUoYXN0LCBwKTtcbiAgICAgIGxldCB2YWx1ZTtcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlLmtpbmQgPT09ICdvYmplY3QnIHx8IG5vZGUua2luZCA9PT0gJ2FycmF5Jykge1xuICAgICAgICAgIHZhbHVlID0gY3JlYXRlKG5vZGUsIHByb3BlcnR5UGF0aCwgKHBhdGgsIHBhcmVudCwgdm5vZGUsIG9sZCwgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFhbHRlcmVkTm9kZXMuaGFzKG5vZGUpKSB7XG4gICAgICAgICAgICAgIHJlcG9ydGVyKHBhdGgsIHBhcmVudCwgdm5vZGUsIG9sZCwgY3VycmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBub2RlLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FjaGUuc2V0KHByb3BlcnR5UGF0aCwgeyBub2RlLCBwYXJlbnQsIHZhbHVlIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0OiB7fSwgcDogUHJveHlQcm9wZXJ0eUtleSwgdmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIHNldHRpbmcgdG8gdW5kZWZpbmVkIGlzIGVxdWl2YWxlbnQgdG8gYSBkZWxldGVcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlUHJvcGVydHkhKHRhcmdldCwgcCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N5bWJvbCcgfHwgUmVmbGVjdC5oYXModGFyZ2V0LCBwKSkge1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQodGFyZ2V0LCBwLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGV4Y2x1ZGVkLmhhcyhwKSB8fCAoaW5jbHVkZWQgJiYgIWluY2x1ZGVkLmhhcyhwKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPOiBDaGVjayBpZiBpcyBKU09OIHZhbHVlXG4gICAgICBjb25zdCBqc29uVmFsdWUgPSB2YWx1ZSBhcyBKc29uVmFsdWU7XG5cbiAgICAgIGNvbnN0IHByb3BlcnR5UGF0aCA9IHBhdGggKyAnLycgKyBlc2NhcGVLZXkocCk7XG4gICAgICBjb25zdCBjYWNoZUVudHJ5ID0gY2FjaGUuZ2V0KHByb3BlcnR5UGF0aCk7XG4gICAgICBpZiAoY2FjaGVFbnRyeSkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IGNhY2hlRW50cnkudmFsdWU7XG4gICAgICAgIGNhY2hlRW50cnkudmFsdWUgPSB2YWx1ZSBhcyBKc29uVmFsdWU7XG4gICAgICAgIGlmIChjYWNoZUVudHJ5Lm5vZGUgJiYgb2xkVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgYWx0ZXJlZE5vZGVzLmFkZChjYWNoZUVudHJ5Lm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHJlcG9ydGVyKHByb3BlcnR5UGF0aCwgY2FjaGVFbnRyeS5wYXJlbnQsIGNhY2hlRW50cnkubm9kZSwgb2xkVmFsdWUsIGpzb25WYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IG5vZGUsIHBhcmVudCB9ID0gZmluZE5vZGUoYXN0LCBwKTtcbiAgICAgICAgY2FjaGUuc2V0KHByb3BlcnR5UGF0aCwgeyBub2RlLCBwYXJlbnQsIHZhbHVlOiB2YWx1ZSBhcyBKc29uVmFsdWUgfSk7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUudmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgYWx0ZXJlZE5vZGVzLmFkZChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXBvcnRlcihwcm9wZXJ0eVBhdGgsIHBhcmVudCwgbm9kZSwgbm9kZSAmJiBub2RlLnZhbHVlLCB2YWx1ZSBhcyBKc29uVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldDoge30sIHA6IFByb3h5UHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N5bWJvbCcgfHwgUmVmbGVjdC5oYXModGFyZ2V0LCBwKSkge1xuICAgICAgICByZXR1cm4gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHApO1xuICAgICAgfSBlbHNlIGlmIChleGNsdWRlZC5oYXMocCkgfHwgKGluY2x1ZGVkICYmICFpbmNsdWRlZC5oYXMocCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvcGVydHlQYXRoID0gcGF0aCArICcvJyArIGVzY2FwZUtleShwKTtcbiAgICAgIGNvbnN0IGNhY2hlRW50cnkgPSBjYWNoZS5nZXQocHJvcGVydHlQYXRoKTtcbiAgICAgIGlmIChjYWNoZUVudHJ5KSB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gY2FjaGVFbnRyeS52YWx1ZTtcbiAgICAgICAgY2FjaGVFbnRyeS52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNhY2hlRW50cnkubm9kZSkge1xuICAgICAgICAgIGFsdGVyZWROb2Rlcy5hZGQoY2FjaGVFbnRyeS5ub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FjaGVFbnRyeS5wYXJlbnQua2luZCA9PT0gJ2tleXZhbHVlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgZW50aXJlIGtleS92YWx1ZSBwYWlyIGZyb20gdGhpcyBKU09OIG9iamVjdFxuICAgICAgICAgIHJlcG9ydGVyKHByb3BlcnR5UGF0aCwgYXN0LCBjYWNoZUVudHJ5Lm5vZGUsIG9sZFZhbHVlLCB1bmRlZmluZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcG9ydGVyKHByb3BlcnR5UGF0aCwgY2FjaGVFbnRyeS5wYXJlbnQsIGNhY2hlRW50cnkubm9kZSwgb2xkVmFsdWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgbm9kZSwgcGFyZW50IH0gPSBmaW5kTm9kZShhc3QsIHApO1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIGNhY2hlLnNldChwcm9wZXJ0eVBhdGgsIHsgbm9kZSwgcGFyZW50LCB2YWx1ZTogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIGFsdGVyZWROb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgICAgaWYgKHBhcmVudC5raW5kID09PSAna2V5dmFsdWUnKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGVudGlyZSBrZXkvdmFsdWUgcGFpciBmcm9tIHRoaXMgSlNPTiBvYmplY3RcbiAgICAgICAgICAgIHJlcG9ydGVyKHByb3BlcnR5UGF0aCwgYXN0LCBub2RlLCBub2RlICYmIG5vZGUudmFsdWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcG9ydGVyKHByb3BlcnR5UGF0aCwgcGFyZW50LCBub2RlLCBub2RlICYmIG5vZGUudmFsdWUsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0OiB7fSwgcDogUHJveHlQcm9wZXJ0eUtleSwgYXR0cmlidXRlczogUHJvcGVydHlEZXNjcmlwdG9yKTogYm9vbGVhbiB7XG4gICAgICBpZiAodHlwZW9mIHAgPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcCwgYXR0cmlidXRlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIG93bktleXModGFyZ2V0OiB7fSk6IFByb3h5UHJvcGVydHlLZXlbXSB7XG4gICAgICBsZXQga2V5czogUHJveHlQcm9wZXJ0eUtleVtdO1xuICAgICAgaWYgKGFzdC5raW5kID09PSAnb2JqZWN0Jykge1xuICAgICAgICBrZXlzID0gYXN0LnByb3BlcnRpZXNcbiAgICAgICAgICAubWFwKChlbnRyeSkgPT4gZW50cnkua2V5LnZhbHVlKVxuICAgICAgICAgIC5maWx0ZXIoKHApID0+ICFleGNsdWRlZC5oYXMocCkgJiYgKCFpbmNsdWRlZCB8fCBpbmNsdWRlZC5oYXMocCkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBrZXkgb2YgY2FjaGUua2V5cygpKSB7XG4gICAgICAgIGNvbnN0IHJlbGF0aXZlS2V5ID0ga2V5LnN1YnN0cihwYXRoLmxlbmd0aCArIDEpO1xuICAgICAgICBpZiAocmVsYXRpdmVLZXkubGVuZ3RoID4gMCAmJiAhcmVsYXRpdmVLZXkuaW5jbHVkZXMoJy8nKSkge1xuICAgICAgICAgIGtleXMucHVzaChgJHt1bmVzY2FwZUtleShyZWxhdGl2ZUtleSl9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFsuLi5uZXcgU2V0KFsuLi5rZXlzLCAuLi5SZWZsZWN0Lm93bktleXModGFyZ2V0KV0pXTtcbiAgICB9LFxuICB9KTtcbn1cbiJdfQ==