"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Subject_1 = require("rxjs/Subject");
const empty_1 = require("rxjs/observable/empty");
const of_1 = require("rxjs/observable/of");
const throw_1 = require("rxjs/observable/throw");
const exception_1 = require("../../exception/exception");
const path_1 = require("../path");
class SimpleMemoryHost {
    constructor() {
        this._cache = new Map();
        this._watchers = new Map();
    }
    _toAbsolute(path) {
        return path_1.isAbsolute(path) ? path : path_1.normalize('/' + path);
    }
    _isDir(path) {
        if (path === '/') {
            return true;
        }
        for (const p of this._cache.keys()) {
            if (p.startsWith(path + path_1.NormalizedSep)) {
                return true;
            }
        }
        return false;
    }
    _updateWatchers(path, type) {
        const time = new Date();
        let currentPath = path;
        let parent = null;
        if (this._watchers.size == 0) {
            // Nothing to do if there's no watchers.
            return;
        }
        const maybeWatcher = this._watchers.get(currentPath);
        if (maybeWatcher) {
            maybeWatcher.forEach(watcher => {
                const [options, subject] = watcher;
                subject.next({ path, time, type });
                if (!options.persistent && type == 2 /* Deleted */) {
                    subject.complete();
                    this._watchers.delete(currentPath);
                }
            });
        }
        do {
            currentPath = parent !== null ? parent : currentPath;
            parent = path_1.dirname(currentPath);
            const maybeWatcher = this._watchers.get(currentPath);
            if (maybeWatcher) {
                maybeWatcher.forEach(watcher => {
                    const [options, subject] = watcher;
                    if (!options.recursive) {
                        return;
                    }
                    subject.next({ path, time, type });
                    if (!options.persistent && type == 2 /* Deleted */) {
                        subject.complete();
                        this._watchers.delete(currentPath);
                    }
                });
            }
        } while (parent != currentPath);
    }
    get capabilities() {
        return { synchronous: true };
    }
    write(path, content) {
        path = this._toAbsolute(path);
        if (this._isDir(path)) {
            return throw_1._throw(new exception_1.PathIsDirectoryException(path));
        }
        const existed = this._cache.has(path);
        this._cache.set(path, content);
        this._updateWatchers(path, existed ? 0 /* Changed */ : 1 /* Created */);
        return empty_1.empty();
    }
    read(path) {
        path = this._toAbsolute(path);
        if (this._isDir(path)) {
            return throw_1._throw(new exception_1.PathIsDirectoryException(path));
        }
        const maybeBuffer = this._cache.get(path);
        if (!maybeBuffer) {
            return throw_1._throw(new exception_1.FileDoesNotExistException(path));
        }
        else {
            return of_1.of(maybeBuffer);
        }
    }
    delete(path) {
        path = this._toAbsolute(path);
        if (this._isDir(path)) {
            for (const [cachePath, _] of this._cache.entries()) {
                if (path.startsWith(cachePath + path_1.NormalizedSep)) {
                    this._cache.delete(cachePath);
                }
            }
        }
        else {
            this._cache.delete(path);
        }
        this._updateWatchers(path, 2 /* Deleted */);
        return empty_1.empty();
    }
    rename(from, to) {
        from = this._toAbsolute(from);
        to = this._toAbsolute(to);
        if (!this._cache.has(from)) {
            return throw_1._throw(new exception_1.FileDoesNotExistException(from));
        }
        else if (this._cache.has(to)) {
            return throw_1._throw(new exception_1.FileAlreadyExistException(from));
        }
        if (this._isDir(from)) {
            for (const path of this._cache.keys()) {
                if (path.startsWith(from + path_1.NormalizedSep)) {
                    const content = this._cache.get(path);
                    if (content) {
                        this._cache.set(path_1.join(to, path_1.NormalizedSep, path.slice(from.length)), content);
                    }
                }
            }
        }
        else {
            const content = this._cache.get(from);
            if (content) {
                this._cache.delete(from);
                this._cache.set(to, content);
            }
        }
        this._updateWatchers(from, 3 /* Renamed */);
        return empty_1.empty();
    }
    list(path) {
        path = this._toAbsolute(path);
        if (this._cache.has(path)) {
            return throw_1._throw(new exception_1.PathIsFileException(path));
        }
        const fragments = path_1.split(path);
        const result = new Set();
        if (path !== path_1.NormalizedRoot) {
            for (const p of this._cache.keys()) {
                if (p.startsWith(path + path_1.NormalizedSep)) {
                    result.add(path_1.split(p)[fragments.length]);
                }
            }
        }
        else {
            for (const p of this._cache.keys()) {
                if (p.startsWith(path_1.NormalizedSep)) {
                    result.add(path_1.split(p)[1]);
                }
            }
        }
        return of_1.of([...result]);
    }
    exists(path) {
        path = this._toAbsolute(path);
        return of_1.of(this._cache.has(path) || this._isDir(path));
    }
    isDirectory(path) {
        return of_1.of(this._isDir(this._toAbsolute(path)));
    }
    isFile(path) {
        return of_1.of(this._cache.has(this._toAbsolute(path)));
    }
    stats(_path) {
        return null;
    }
    watch(path, options) {
        path = this._toAbsolute(path);
        const subject = new Subject_1.Subject();
        let maybeWatcherArray = this._watchers.get(path);
        if (!maybeWatcherArray) {
            maybeWatcherArray = [];
            this._watchers.set(path, maybeWatcherArray);
        }
        maybeWatcherArray.push([options || {}, subject]);
        return subject.asObservable();
    }
}
exports.SimpleMemoryHost = SimpleMemoryHost;
//# sourceMappingURL=data:application/json;base64,